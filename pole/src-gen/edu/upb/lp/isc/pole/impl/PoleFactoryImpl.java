/**
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.pole.impl;

import edu.upb.lp.isc.pole.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PoleFactoryImpl extends EFactoryImpl implements PoleFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PoleFactory init()
  {
    try
    {
      PoleFactory thePoleFactory = (PoleFactory)EPackage.Registry.INSTANCE.getEFactory(PolePackage.eNS_URI);
      if (thePoleFactory != null)
      {
        return thePoleFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PoleFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PoleFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PolePackage.PROGRAMA: return createPrograma();
      case PolePackage.EJECUCION: return createEjecucion();
      case PolePackage.INSTRUCCION: return createInstruccion();
      case PolePackage.LLAMADO_METODO: return createLlamadoMetodo();
      case PolePackage.FUNCIONES: return createFunciones();
      case PolePackage.IMPRIMIR: return createImprimir();
      case PolePackage.IMPRIMIR_SIN_SALTO_DE_LINEA: return createImprimirSinSaltoDeLinea();
      case PolePackage.CONDICIONAL: return createCondicional();
      case PolePackage.CONDICIONAL_ELSE_IF: return createCondicionalElseIf();
      case PolePackage.SWITCH: return createSwitch();
      case PolePackage.CASE_SWITCH: return createCaseSwitch();
      case PolePackage.FOR: return createFor();
      case PolePackage.WHILE: return createWhile();
      case PolePackage.DO_WHILE: return createDoWhile();
      case PolePackage.DECL_VARIABLES: return createDeclVariables();
      case PolePackage.ASIGNACION_VARIABLE: return createAsignacionVariable();
      case PolePackage.EXPRESION: return createExpresion();
      case PolePackage.LLAMADO_VARIABLE: return createLlamadoVariable();
      case PolePackage.LLAMADO_FUNCION: return createLlamadoFuncion();
      case PolePackage.EXPRESION_DECIMAL: return createExpresionDecimal();
      case PolePackage.EXPRESION_NEGATIVO: return createExpresionNegativo();
      case PolePackage.EXPRESION_SIMPLE_XOKAS: return createExpresionSimpleXokas();
      case PolePackage.EXPRESION_SIMPLE_ARITMETICA: return createExpresionSimpleAritmetica();
      case PolePackage.EXPRESION_LONGITUD_STRING: return createExpresionLongitudString();
      case PolePackage.EXPRESION_ARITMETICA: return createExpresionAritmetica();
      case PolePackage.SUMA: return createSuma();
      case PolePackage.RESTA: return createResta();
      case PolePackage.MULTIPLICACION: return createMultiplicacion();
      case PolePackage.DIVISION: return createDivision();
      case PolePackage.MODULO: return createModulo();
      case PolePackage.OPERACION: return createOperacion();
      case PolePackage.EXPRESION_STRING: return createExpresionString();
      case PolePackage.EXPRESION_SIMPLE_STRING: return createExpresionSimpleString();
      case PolePackage.EXPRESION_CONCATENACION: return createExpresionConcatenacion();
      case PolePackage.EXPRESION_BOOLEANA: return createExpresionBooleana();
      case PolePackage.EXPRESION_OPERACIONES_BOOLEANAS: return createExpresionOperacionesBooleanas();
      case PolePackage.OPERACIONES_BOOLEANAS_DE_COMPARACION: return createOperacionesBooleanasDeComparacion();
      case PolePackage.EXPRESION_STRING_VACIO: return createExpresionStringVacio();
      case PolePackage.OPERADORES_LOGICOS_BOOLEANOS: return createOperadoresLogicosBooleanos();
      case PolePackage.OPERACIONES_BOOLEANAS_DE_COMPARACION_ARITMETICA: return createOperacionesBooleanasDeComparacionAritmetica();
      case PolePackage.OP_NEG: return createOpNEG();
      case PolePackage.OP_COMP: return createOpComp();
      case PolePackage.EXPRESION_BOOLEANA_SIMPLE: return createExpresionBooleanaSimple();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Programa createPrograma()
  {
    ProgramaImpl programa = new ProgramaImpl();
    return programa;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ejecucion createEjecucion()
  {
    EjecucionImpl ejecucion = new EjecucionImpl();
    return ejecucion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruccion createInstruccion()
  {
    InstruccionImpl instruccion = new InstruccionImpl();
    return instruccion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LlamadoMetodo createLlamadoMetodo()
  {
    LlamadoMetodoImpl llamadoMetodo = new LlamadoMetodoImpl();
    return llamadoMetodo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Funciones createFunciones()
  {
    FuncionesImpl funciones = new FuncionesImpl();
    return funciones;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Imprimir createImprimir()
  {
    ImprimirImpl imprimir = new ImprimirImpl();
    return imprimir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImprimirSinSaltoDeLinea createImprimirSinSaltoDeLinea()
  {
    ImprimirSinSaltoDeLineaImpl imprimirSinSaltoDeLinea = new ImprimirSinSaltoDeLineaImpl();
    return imprimirSinSaltoDeLinea;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condicional createCondicional()
  {
    CondicionalImpl condicional = new CondicionalImpl();
    return condicional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CondicionalElseIf createCondicionalElseIf()
  {
    CondicionalElseIfImpl condicionalElseIf = new CondicionalElseIfImpl();
    return condicionalElseIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Switch createSwitch()
  {
    SwitchImpl switch_ = new SwitchImpl();
    return switch_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseSwitch createCaseSwitch()
  {
    CaseSwitchImpl caseSwitch = new CaseSwitchImpl();
    return caseSwitch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public For createFor()
  {
    ForImpl for_ = new ForImpl();
    return for_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public While createWhile()
  {
    WhileImpl while_ = new WhileImpl();
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoWhile createDoWhile()
  {
    DoWhileImpl doWhile = new DoWhileImpl();
    return doWhile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclVariables createDeclVariables()
  {
    DeclVariablesImpl declVariables = new DeclVariablesImpl();
    return declVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsignacionVariable createAsignacionVariable()
  {
    AsignacionVariableImpl asignacionVariable = new AsignacionVariableImpl();
    return asignacionVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expresion createExpresion()
  {
    ExpresionImpl expresion = new ExpresionImpl();
    return expresion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LlamadoVariable createLlamadoVariable()
  {
    LlamadoVariableImpl llamadoVariable = new LlamadoVariableImpl();
    return llamadoVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LlamadoFuncion createLlamadoFuncion()
  {
    LlamadoFuncionImpl llamadoFuncion = new LlamadoFuncionImpl();
    return llamadoFuncion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionDecimal createExpresionDecimal()
  {
    ExpresionDecimalImpl expresionDecimal = new ExpresionDecimalImpl();
    return expresionDecimal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionNegativo createExpresionNegativo()
  {
    ExpresionNegativoImpl expresionNegativo = new ExpresionNegativoImpl();
    return expresionNegativo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionSimpleXokas createExpresionSimpleXokas()
  {
    ExpresionSimpleXokasImpl expresionSimpleXokas = new ExpresionSimpleXokasImpl();
    return expresionSimpleXokas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionSimpleAritmetica createExpresionSimpleAritmetica()
  {
    ExpresionSimpleAritmeticaImpl expresionSimpleAritmetica = new ExpresionSimpleAritmeticaImpl();
    return expresionSimpleAritmetica;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionLongitudString createExpresionLongitudString()
  {
    ExpresionLongitudStringImpl expresionLongitudString = new ExpresionLongitudStringImpl();
    return expresionLongitudString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionAritmetica createExpresionAritmetica()
  {
    ExpresionAritmeticaImpl expresionAritmetica = new ExpresionAritmeticaImpl();
    return expresionAritmetica;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Suma createSuma()
  {
    SumaImpl suma = new SumaImpl();
    return suma;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Resta createResta()
  {
    RestaImpl resta = new RestaImpl();
    return resta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplicacion createMultiplicacion()
  {
    MultiplicacionImpl multiplicacion = new MultiplicacionImpl();
    return multiplicacion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Division createDivision()
  {
    DivisionImpl division = new DivisionImpl();
    return division;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Modulo createModulo()
  {
    ModuloImpl modulo = new ModuloImpl();
    return modulo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operacion createOperacion()
  {
    OperacionImpl operacion = new OperacionImpl();
    return operacion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionString createExpresionString()
  {
    ExpresionStringImpl expresionString = new ExpresionStringImpl();
    return expresionString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionSimpleString createExpresionSimpleString()
  {
    ExpresionSimpleStringImpl expresionSimpleString = new ExpresionSimpleStringImpl();
    return expresionSimpleString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionConcatenacion createExpresionConcatenacion()
  {
    ExpresionConcatenacionImpl expresionConcatenacion = new ExpresionConcatenacionImpl();
    return expresionConcatenacion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionBooleana createExpresionBooleana()
  {
    ExpresionBooleanaImpl expresionBooleana = new ExpresionBooleanaImpl();
    return expresionBooleana;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionOperacionesBooleanas createExpresionOperacionesBooleanas()
  {
    ExpresionOperacionesBooleanasImpl expresionOperacionesBooleanas = new ExpresionOperacionesBooleanasImpl();
    return expresionOperacionesBooleanas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperacionesBooleanasDeComparacion createOperacionesBooleanasDeComparacion()
  {
    OperacionesBooleanasDeComparacionImpl operacionesBooleanasDeComparacion = new OperacionesBooleanasDeComparacionImpl();
    return operacionesBooleanasDeComparacion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionStringVacio createExpresionStringVacio()
  {
    ExpresionStringVacioImpl expresionStringVacio = new ExpresionStringVacioImpl();
    return expresionStringVacio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperadoresLogicosBooleanos createOperadoresLogicosBooleanos()
  {
    OperadoresLogicosBooleanosImpl operadoresLogicosBooleanos = new OperadoresLogicosBooleanosImpl();
    return operadoresLogicosBooleanos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperacionesBooleanasDeComparacionAritmetica createOperacionesBooleanasDeComparacionAritmetica()
  {
    OperacionesBooleanasDeComparacionAritmeticaImpl operacionesBooleanasDeComparacionAritmetica = new OperacionesBooleanasDeComparacionAritmeticaImpl();
    return operacionesBooleanasDeComparacionAritmetica;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpNEG createOpNEG()
  {
    OpNEGImpl opNEG = new OpNEGImpl();
    return opNEG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpComp createOpComp()
  {
    OpCompImpl opComp = new OpCompImpl();
    return opComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionBooleanaSimple createExpresionBooleanaSimple()
  {
    ExpresionBooleanaSimpleImpl expresionBooleanaSimple = new ExpresionBooleanaSimpleImpl();
    return expresionBooleanaSimple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PolePackage getPolePackage()
  {
    return (PolePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PolePackage getPackage()
  {
    return PolePackage.eINSTANCE;
  }

} //PoleFactoryImpl

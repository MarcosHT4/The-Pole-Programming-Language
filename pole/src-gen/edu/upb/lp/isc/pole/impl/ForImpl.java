/**
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.pole.impl;

import edu.upb.lp.isc.pole.AsignacionVariable;
import edu.upb.lp.isc.pole.DeclVariables;
import edu.upb.lp.isc.pole.ExpresionBooleana;
import edu.upb.lp.isc.pole.For;
import edu.upb.lp.isc.pole.Instruccion;
import edu.upb.lp.isc.pole.PolePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.upb.lp.isc.pole.impl.ForImpl#getName <em>Name</em>}</li>
 *   <li>{@link edu.upb.lp.isc.pole.impl.ForImpl#getVar <em>Var</em>}</li>
 *   <li>{@link edu.upb.lp.isc.pole.impl.ForImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link edu.upb.lp.isc.pole.impl.ForImpl#getAsig <em>Asig</em>}</li>
 *   <li>{@link edu.upb.lp.isc.pole.impl.ForImpl#getInstr <em>Instr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForImpl extends InstruccionImpl implements For
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected DeclVariables var;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected ExpresionBooleana expr;

  /**
   * The cached value of the '{@link #getAsig() <em>Asig</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsig()
   * @generated
   * @ordered
   */
  protected AsignacionVariable asig;

  /**
   * The cached value of the '{@link #getInstr() <em>Instr</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstr()
   * @generated
   * @ordered
   */
  protected EList<Instruccion> instr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PolePackage.Literals.FOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PolePackage.FOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclVariables getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVar(DeclVariables newVar, NotificationChain msgs)
  {
    DeclVariables oldVar = var;
    var = newVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PolePackage.FOR__VAR, oldVar, newVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar(DeclVariables newVar)
  {
    if (newVar != var)
    {
      NotificationChain msgs = null;
      if (var != null)
        msgs = ((InternalEObject)var).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PolePackage.FOR__VAR, null, msgs);
      if (newVar != null)
        msgs = ((InternalEObject)newVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PolePackage.FOR__VAR, null, msgs);
      msgs = basicSetVar(newVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PolePackage.FOR__VAR, newVar, newVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpresionBooleana getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(ExpresionBooleana newExpr, NotificationChain msgs)
  {
    ExpresionBooleana oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PolePackage.FOR__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpr(ExpresionBooleana newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PolePackage.FOR__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PolePackage.FOR__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PolePackage.FOR__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsignacionVariable getAsig()
  {
    return asig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAsig(AsignacionVariable newAsig, NotificationChain msgs)
  {
    AsignacionVariable oldAsig = asig;
    asig = newAsig;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PolePackage.FOR__ASIG, oldAsig, newAsig);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAsig(AsignacionVariable newAsig)
  {
    if (newAsig != asig)
    {
      NotificationChain msgs = null;
      if (asig != null)
        msgs = ((InternalEObject)asig).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PolePackage.FOR__ASIG, null, msgs);
      if (newAsig != null)
        msgs = ((InternalEObject)newAsig).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PolePackage.FOR__ASIG, null, msgs);
      msgs = basicSetAsig(newAsig, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PolePackage.FOR__ASIG, newAsig, newAsig));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Instruccion> getInstr()
  {
    if (instr == null)
    {
      instr = new EObjectContainmentEList<Instruccion>(Instruccion.class, this, PolePackage.FOR__INSTR);
    }
    return instr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PolePackage.FOR__VAR:
        return basicSetVar(null, msgs);
      case PolePackage.FOR__EXPR:
        return basicSetExpr(null, msgs);
      case PolePackage.FOR__ASIG:
        return basicSetAsig(null, msgs);
      case PolePackage.FOR__INSTR:
        return ((InternalEList<?>)getInstr()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PolePackage.FOR__NAME:
        return getName();
      case PolePackage.FOR__VAR:
        return getVar();
      case PolePackage.FOR__EXPR:
        return getExpr();
      case PolePackage.FOR__ASIG:
        return getAsig();
      case PolePackage.FOR__INSTR:
        return getInstr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PolePackage.FOR__NAME:
        setName((String)newValue);
        return;
      case PolePackage.FOR__VAR:
        setVar((DeclVariables)newValue);
        return;
      case PolePackage.FOR__EXPR:
        setExpr((ExpresionBooleana)newValue);
        return;
      case PolePackage.FOR__ASIG:
        setAsig((AsignacionVariable)newValue);
        return;
      case PolePackage.FOR__INSTR:
        getInstr().clear();
        getInstr().addAll((Collection<? extends Instruccion>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PolePackage.FOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case PolePackage.FOR__VAR:
        setVar((DeclVariables)null);
        return;
      case PolePackage.FOR__EXPR:
        setExpr((ExpresionBooleana)null);
        return;
      case PolePackage.FOR__ASIG:
        setAsig((AsignacionVariable)null);
        return;
      case PolePackage.FOR__INSTR:
        getInstr().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PolePackage.FOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case PolePackage.FOR__VAR:
        return var != null;
      case PolePackage.FOR__EXPR:
        return expr != null;
      case PolePackage.FOR__ASIG:
        return asig != null;
      case PolePackage.FOR__INSTR:
        return instr != null && !instr.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ForImpl

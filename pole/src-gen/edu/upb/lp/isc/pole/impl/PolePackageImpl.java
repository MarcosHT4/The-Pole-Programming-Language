/**
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.pole.impl;

import edu.upb.lp.isc.pole.AsignacionVariable;
import edu.upb.lp.isc.pole.CaseSwitch;
import edu.upb.lp.isc.pole.Condicional;
import edu.upb.lp.isc.pole.CondicionalElseIf;
import edu.upb.lp.isc.pole.DeclVariables;
import edu.upb.lp.isc.pole.Division;
import edu.upb.lp.isc.pole.DoWhile;
import edu.upb.lp.isc.pole.Ejecucion;
import edu.upb.lp.isc.pole.Expresion;
import edu.upb.lp.isc.pole.ExpresionAritmetica;
import edu.upb.lp.isc.pole.ExpresionBooleana;
import edu.upb.lp.isc.pole.ExpresionBooleanaSimple;
import edu.upb.lp.isc.pole.ExpresionConcatenacion;
import edu.upb.lp.isc.pole.ExpresionDecimal;
import edu.upb.lp.isc.pole.ExpresionLongitudString;
import edu.upb.lp.isc.pole.ExpresionNegativo;
import edu.upb.lp.isc.pole.ExpresionOperacionesBooleanas;
import edu.upb.lp.isc.pole.ExpresionSimpleAritmetica;
import edu.upb.lp.isc.pole.ExpresionSimpleString;
import edu.upb.lp.isc.pole.ExpresionSimpleXokas;
import edu.upb.lp.isc.pole.ExpresionString;
import edu.upb.lp.isc.pole.ExpresionStringVacio;
import edu.upb.lp.isc.pole.For;
import edu.upb.lp.isc.pole.Funciones;
import edu.upb.lp.isc.pole.Imprimir;
import edu.upb.lp.isc.pole.ImprimirSinSaltoDeLinea;
import edu.upb.lp.isc.pole.Instruccion;
import edu.upb.lp.isc.pole.LlamadoFuncion;
import edu.upb.lp.isc.pole.LlamadoMetodo;
import edu.upb.lp.isc.pole.LlamadoVariable;
import edu.upb.lp.isc.pole.Modulo;
import edu.upb.lp.isc.pole.Multiplicacion;
import edu.upb.lp.isc.pole.OpComp;
import edu.upb.lp.isc.pole.OpNEG;
import edu.upb.lp.isc.pole.Operacion;
import edu.upb.lp.isc.pole.OperacionesBooleanasDeComparacion;
import edu.upb.lp.isc.pole.OperacionesBooleanasDeComparacionAritmetica;
import edu.upb.lp.isc.pole.OperadoresLogicosBooleanos;
import edu.upb.lp.isc.pole.PoleFactory;
import edu.upb.lp.isc.pole.PolePackage;
import edu.upb.lp.isc.pole.Programa;
import edu.upb.lp.isc.pole.Resta;
import edu.upb.lp.isc.pole.Suma;
import edu.upb.lp.isc.pole.Switch;
import edu.upb.lp.isc.pole.While;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PolePackageImpl extends EPackageImpl implements PolePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass programaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ejecucionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass instruccionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass llamadoMetodoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass funcionesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass imprimirEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass imprimirSinSaltoDeLineaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condicionalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condicionalElseIfEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass switchEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseSwitchEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass whileEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass doWhileEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass declVariablesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass asignacionVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass llamadoVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass llamadoFuncionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionDecimalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionNegativoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionSimpleXokasEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionSimpleAritmeticaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionLongitudStringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionAritmeticaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sumaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass restaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiplicacionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass divisionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduloEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operacionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionStringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionSimpleStringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionConcatenacionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionBooleanaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionOperacionesBooleanasEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operacionesBooleanasDeComparacionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionStringVacioEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operadoresLogicosBooleanosEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operacionesBooleanasDeComparacionAritmeticaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass opNEGEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass opCompEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expresionBooleanaSimpleEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see edu.upb.lp.isc.pole.PolePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private PolePackageImpl()
  {
    super(eNS_URI, PoleFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link PolePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static PolePackage init()
  {
    if (isInited) return (PolePackage)EPackage.Registry.INSTANCE.getEPackage(PolePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredPolePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    PolePackageImpl thePolePackage = registeredPolePackage instanceof PolePackageImpl ? (PolePackageImpl)registeredPolePackage : new PolePackageImpl();

    isInited = true;

    // Create package meta-data objects
    thePolePackage.createPackageContents();

    // Initialize created meta-data
    thePolePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    thePolePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(PolePackage.eNS_URI, thePolePackage);
    return thePolePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPrograma()
  {
    return programaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPrograma_Name()
  {
    return (EAttribute)programaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPrograma_Ej()
  {
    return (EReference)programaEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEjecucion()
  {
    return ejecucionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEjecucion_Instr()
  {
    return (EReference)ejecucionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInstruccion()
  {
    return instruccionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLlamadoMetodo()
  {
    return llamadoMetodoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLlamadoMetodo_Method()
  {
    return (EReference)llamadoMetodoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLlamadoMetodo_Args()
  {
    return (EReference)llamadoMetodoEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFunciones()
  {
    return funcionesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunciones_TipoDeDato()
  {
    return (EAttribute)funcionesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunciones_Name()
  {
    return (EAttribute)funcionesEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunciones_Param()
  {
    return (EReference)funcionesEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunciones_Instr()
  {
    return (EReference)funcionesEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunciones_E()
  {
    return (EReference)funcionesEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getImprimir()
  {
    return imprimirEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getImprimir_E()
  {
    return (EReference)imprimirEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getImprimir_E1()
  {
    return (EReference)imprimirEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getImprimirSinSaltoDeLinea()
  {
    return imprimirSinSaltoDeLineaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getImprimirSinSaltoDeLinea_E()
  {
    return (EReference)imprimirSinSaltoDeLineaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getImprimirSinSaltoDeLinea_E1()
  {
    return (EReference)imprimirSinSaltoDeLineaEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCondicional()
  {
    return condicionalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCondicional_Expr()
  {
    return (EReference)condicionalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCondicional_Instr()
  {
    return (EReference)condicionalEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCondicional_CasiTeam()
  {
    return (EReference)condicionalEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCondicional_InstrElse()
  {
    return (EReference)condicionalEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCondicionalElseIf()
  {
    return condicionalElseIfEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCondicionalElseIf_ExprELIF()
  {
    return (EReference)condicionalElseIfEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCondicionalElseIf_InstrELIF()
  {
    return (EReference)condicionalElseIfEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSwitch()
  {
    return switchEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSwitch_Var()
  {
    return (EReference)switchEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSwitch_Case()
  {
    return (EReference)switchEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCaseSwitch()
  {
    return caseSwitchEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseSwitch_E()
  {
    return (EReference)caseSwitchEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseSwitch_Instr()
  {
    return (EReference)caseSwitchEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFor()
  {
    return forEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFor_Name()
  {
    return (EAttribute)forEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFor_Var()
  {
    return (EReference)forEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFor_Expr()
  {
    return (EReference)forEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFor_Asig()
  {
    return (EReference)forEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFor_Instr()
  {
    return (EReference)forEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWhile()
  {
    return whileEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWhile_Name()
  {
    return (EAttribute)whileEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhile_Expr()
  {
    return (EReference)whileEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhile_Instr()
  {
    return (EReference)whileEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDoWhile()
  {
    return doWhileEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDoWhile_Name()
  {
    return (EAttribute)doWhileEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDoWhile_Instr()
  {
    return (EReference)doWhileEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDoWhile_Expr()
  {
    return (EReference)doWhileEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeclVariables()
  {
    return declVariablesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeclVariables_TipoDeDato()
  {
    return (EAttribute)declVariablesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeclVariables_Name()
  {
    return (EAttribute)declVariablesEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeclVariables_Valor()
  {
    return (EReference)declVariablesEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAsignacionVariable()
  {
    return asignacionVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAsignacionVariable_Variable()
  {
    return (EReference)asignacionVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAsignacionVariable_Valor()
  {
    return (EReference)asignacionVariableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresion()
  {
    return expresionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLlamadoVariable()
  {
    return llamadoVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLlamadoVariable_Variable()
  {
    return (EReference)llamadoVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLlamadoFuncion()
  {
    return llamadoFuncionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLlamadoFuncion_Func()
  {
    return (EReference)llamadoFuncionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLlamadoFuncion_Args()
  {
    return (EReference)llamadoFuncionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionDecimal()
  {
    return expresionDecimalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionNegativo()
  {
    return expresionNegativoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExpresionNegativo_E()
  {
    return (EReference)expresionNegativoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionSimpleXokas()
  {
    return expresionSimpleXokasEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExpresionSimpleXokas_X()
  {
    return (EAttribute)expresionSimpleXokasEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExpresionSimpleXokas_Y()
  {
    return (EAttribute)expresionSimpleXokasEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExpresionSimpleXokas_Z()
  {
    return (EAttribute)expresionSimpleXokasEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionSimpleAritmetica()
  {
    return expresionSimpleAritmeticaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExpresionSimpleAritmetica_X()
  {
    return (EAttribute)expresionSimpleAritmeticaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionLongitudString()
  {
    return expresionLongitudStringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExpresionLongitudString_Llamado()
  {
    return (EReference)expresionLongitudStringEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionAritmetica()
  {
    return expresionAritmeticaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExpresionAritmetica_Op()
  {
    return (EReference)expresionAritmeticaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSuma()
  {
    return sumaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getResta()
  {
    return restaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultiplicacion()
  {
    return multiplicacionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDivision()
  {
    return divisionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModulo()
  {
    return moduloEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperacion()
  {
    return operacionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperacion_Izq()
  {
    return (EReference)operacionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperacion_Der()
  {
    return (EReference)operacionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionString()
  {
    return expresionStringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionSimpleString()
  {
    return expresionSimpleStringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExpresionSimpleString_X()
  {
    return (EAttribute)expresionSimpleStringEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionConcatenacion()
  {
    return expresionConcatenacionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExpresionConcatenacion_Primero()
  {
    return (EReference)expresionConcatenacionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExpresionConcatenacion_Segundo()
  {
    return (EReference)expresionConcatenacionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionBooleana()
  {
    return expresionBooleanaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionOperacionesBooleanas()
  {
    return expresionOperacionesBooleanasEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperacionesBooleanasDeComparacion()
  {
    return operacionesBooleanasDeComparacionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperacionesBooleanasDeComparacion_X()
  {
    return (EAttribute)operacionesBooleanasDeComparacionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperacionesBooleanasDeComparacion_Izq()
  {
    return (EReference)operacionesBooleanasDeComparacionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperacionesBooleanasDeComparacion_Y()
  {
    return (EAttribute)operacionesBooleanasDeComparacionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperacionesBooleanasDeComparacion_Der()
  {
    return (EReference)operacionesBooleanasDeComparacionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionStringVacio()
  {
    return expresionStringVacioEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExpresionStringVacio_Llamado()
  {
    return (EReference)expresionStringVacioEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperadoresLogicosBooleanos()
  {
    return operadoresLogicosBooleanosEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperadoresLogicosBooleanos_X()
  {
    return (EAttribute)operadoresLogicosBooleanosEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperadoresLogicosBooleanos_Izq()
  {
    return (EReference)operadoresLogicosBooleanosEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperadoresLogicosBooleanos_Y()
  {
    return (EAttribute)operadoresLogicosBooleanosEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperadoresLogicosBooleanos_Der()
  {
    return (EReference)operadoresLogicosBooleanosEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperacionesBooleanasDeComparacionAritmetica()
  {
    return operacionesBooleanasDeComparacionAritmeticaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperacionesBooleanasDeComparacionAritmetica_X()
  {
    return (EAttribute)operacionesBooleanasDeComparacionAritmeticaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperacionesBooleanasDeComparacionAritmetica_Op()
  {
    return (EReference)operacionesBooleanasDeComparacionAritmeticaEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOpNEG()
  {
    return opNEGEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOpNEG_Expr()
  {
    return (EReference)opNEGEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOpComp()
  {
    return opCompEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOpComp_Izq()
  {
    return (EReference)opCompEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOpComp_Der()
  {
    return (EReference)opCompEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpresionBooleanaSimple()
  {
    return expresionBooleanaSimpleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExpresionBooleanaSimple_X()
  {
    return (EAttribute)expresionBooleanaSimpleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PoleFactory getPoleFactory()
  {
    return (PoleFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    programaEClass = createEClass(PROGRAMA);
    createEAttribute(programaEClass, PROGRAMA__NAME);
    createEReference(programaEClass, PROGRAMA__EJ);

    ejecucionEClass = createEClass(EJECUCION);
    createEReference(ejecucionEClass, EJECUCION__INSTR);

    instruccionEClass = createEClass(INSTRUCCION);

    llamadoMetodoEClass = createEClass(LLAMADO_METODO);
    createEReference(llamadoMetodoEClass, LLAMADO_METODO__METHOD);
    createEReference(llamadoMetodoEClass, LLAMADO_METODO__ARGS);

    funcionesEClass = createEClass(FUNCIONES);
    createEAttribute(funcionesEClass, FUNCIONES__TIPO_DE_DATO);
    createEAttribute(funcionesEClass, FUNCIONES__NAME);
    createEReference(funcionesEClass, FUNCIONES__PARAM);
    createEReference(funcionesEClass, FUNCIONES__INSTR);
    createEReference(funcionesEClass, FUNCIONES__E);

    imprimirEClass = createEClass(IMPRIMIR);
    createEReference(imprimirEClass, IMPRIMIR__E);
    createEReference(imprimirEClass, IMPRIMIR__E1);

    imprimirSinSaltoDeLineaEClass = createEClass(IMPRIMIR_SIN_SALTO_DE_LINEA);
    createEReference(imprimirSinSaltoDeLineaEClass, IMPRIMIR_SIN_SALTO_DE_LINEA__E);
    createEReference(imprimirSinSaltoDeLineaEClass, IMPRIMIR_SIN_SALTO_DE_LINEA__E1);

    condicionalEClass = createEClass(CONDICIONAL);
    createEReference(condicionalEClass, CONDICIONAL__EXPR);
    createEReference(condicionalEClass, CONDICIONAL__INSTR);
    createEReference(condicionalEClass, CONDICIONAL__CASI_TEAM);
    createEReference(condicionalEClass, CONDICIONAL__INSTR_ELSE);

    condicionalElseIfEClass = createEClass(CONDICIONAL_ELSE_IF);
    createEReference(condicionalElseIfEClass, CONDICIONAL_ELSE_IF__EXPR_ELIF);
    createEReference(condicionalElseIfEClass, CONDICIONAL_ELSE_IF__INSTR_ELIF);

    switchEClass = createEClass(SWITCH);
    createEReference(switchEClass, SWITCH__VAR);
    createEReference(switchEClass, SWITCH__CASE);

    caseSwitchEClass = createEClass(CASE_SWITCH);
    createEReference(caseSwitchEClass, CASE_SWITCH__E);
    createEReference(caseSwitchEClass, CASE_SWITCH__INSTR);

    forEClass = createEClass(FOR);
    createEAttribute(forEClass, FOR__NAME);
    createEReference(forEClass, FOR__VAR);
    createEReference(forEClass, FOR__EXPR);
    createEReference(forEClass, FOR__ASIG);
    createEReference(forEClass, FOR__INSTR);

    whileEClass = createEClass(WHILE);
    createEAttribute(whileEClass, WHILE__NAME);
    createEReference(whileEClass, WHILE__EXPR);
    createEReference(whileEClass, WHILE__INSTR);

    doWhileEClass = createEClass(DO_WHILE);
    createEAttribute(doWhileEClass, DO_WHILE__NAME);
    createEReference(doWhileEClass, DO_WHILE__INSTR);
    createEReference(doWhileEClass, DO_WHILE__EXPR);

    declVariablesEClass = createEClass(DECL_VARIABLES);
    createEAttribute(declVariablesEClass, DECL_VARIABLES__TIPO_DE_DATO);
    createEAttribute(declVariablesEClass, DECL_VARIABLES__NAME);
    createEReference(declVariablesEClass, DECL_VARIABLES__VALOR);

    asignacionVariableEClass = createEClass(ASIGNACION_VARIABLE);
    createEReference(asignacionVariableEClass, ASIGNACION_VARIABLE__VARIABLE);
    createEReference(asignacionVariableEClass, ASIGNACION_VARIABLE__VALOR);

    expresionEClass = createEClass(EXPRESION);

    llamadoVariableEClass = createEClass(LLAMADO_VARIABLE);
    createEReference(llamadoVariableEClass, LLAMADO_VARIABLE__VARIABLE);

    llamadoFuncionEClass = createEClass(LLAMADO_FUNCION);
    createEReference(llamadoFuncionEClass, LLAMADO_FUNCION__FUNC);
    createEReference(llamadoFuncionEClass, LLAMADO_FUNCION__ARGS);

    expresionDecimalEClass = createEClass(EXPRESION_DECIMAL);

    expresionNegativoEClass = createEClass(EXPRESION_NEGATIVO);
    createEReference(expresionNegativoEClass, EXPRESION_NEGATIVO__E);

    expresionSimpleXokasEClass = createEClass(EXPRESION_SIMPLE_XOKAS);
    createEAttribute(expresionSimpleXokasEClass, EXPRESION_SIMPLE_XOKAS__X);
    createEAttribute(expresionSimpleXokasEClass, EXPRESION_SIMPLE_XOKAS__Y);
    createEAttribute(expresionSimpleXokasEClass, EXPRESION_SIMPLE_XOKAS__Z);

    expresionSimpleAritmeticaEClass = createEClass(EXPRESION_SIMPLE_ARITMETICA);
    createEAttribute(expresionSimpleAritmeticaEClass, EXPRESION_SIMPLE_ARITMETICA__X);

    expresionLongitudStringEClass = createEClass(EXPRESION_LONGITUD_STRING);
    createEReference(expresionLongitudStringEClass, EXPRESION_LONGITUD_STRING__LLAMADO);

    expresionAritmeticaEClass = createEClass(EXPRESION_ARITMETICA);
    createEReference(expresionAritmeticaEClass, EXPRESION_ARITMETICA__OP);

    sumaEClass = createEClass(SUMA);

    restaEClass = createEClass(RESTA);

    multiplicacionEClass = createEClass(MULTIPLICACION);

    divisionEClass = createEClass(DIVISION);

    moduloEClass = createEClass(MODULO);

    operacionEClass = createEClass(OPERACION);
    createEReference(operacionEClass, OPERACION__IZQ);
    createEReference(operacionEClass, OPERACION__DER);

    expresionStringEClass = createEClass(EXPRESION_STRING);

    expresionSimpleStringEClass = createEClass(EXPRESION_SIMPLE_STRING);
    createEAttribute(expresionSimpleStringEClass, EXPRESION_SIMPLE_STRING__X);

    expresionConcatenacionEClass = createEClass(EXPRESION_CONCATENACION);
    createEReference(expresionConcatenacionEClass, EXPRESION_CONCATENACION__PRIMERO);
    createEReference(expresionConcatenacionEClass, EXPRESION_CONCATENACION__SEGUNDO);

    expresionBooleanaEClass = createEClass(EXPRESION_BOOLEANA);

    expresionOperacionesBooleanasEClass = createEClass(EXPRESION_OPERACIONES_BOOLEANAS);

    operacionesBooleanasDeComparacionEClass = createEClass(OPERACIONES_BOOLEANAS_DE_COMPARACION);
    createEAttribute(operacionesBooleanasDeComparacionEClass, OPERACIONES_BOOLEANAS_DE_COMPARACION__X);
    createEReference(operacionesBooleanasDeComparacionEClass, OPERACIONES_BOOLEANAS_DE_COMPARACION__IZQ);
    createEAttribute(operacionesBooleanasDeComparacionEClass, OPERACIONES_BOOLEANAS_DE_COMPARACION__Y);
    createEReference(operacionesBooleanasDeComparacionEClass, OPERACIONES_BOOLEANAS_DE_COMPARACION__DER);

    expresionStringVacioEClass = createEClass(EXPRESION_STRING_VACIO);
    createEReference(expresionStringVacioEClass, EXPRESION_STRING_VACIO__LLAMADO);

    operadoresLogicosBooleanosEClass = createEClass(OPERADORES_LOGICOS_BOOLEANOS);
    createEAttribute(operadoresLogicosBooleanosEClass, OPERADORES_LOGICOS_BOOLEANOS__X);
    createEReference(operadoresLogicosBooleanosEClass, OPERADORES_LOGICOS_BOOLEANOS__IZQ);
    createEAttribute(operadoresLogicosBooleanosEClass, OPERADORES_LOGICOS_BOOLEANOS__Y);
    createEReference(operadoresLogicosBooleanosEClass, OPERADORES_LOGICOS_BOOLEANOS__DER);

    operacionesBooleanasDeComparacionAritmeticaEClass = createEClass(OPERACIONES_BOOLEANAS_DE_COMPARACION_ARITMETICA);
    createEAttribute(operacionesBooleanasDeComparacionAritmeticaEClass, OPERACIONES_BOOLEANAS_DE_COMPARACION_ARITMETICA__X);
    createEReference(operacionesBooleanasDeComparacionAritmeticaEClass, OPERACIONES_BOOLEANAS_DE_COMPARACION_ARITMETICA__OP);

    opNEGEClass = createEClass(OP_NEG);
    createEReference(opNEGEClass, OP_NEG__EXPR);

    opCompEClass = createEClass(OP_COMP);
    createEReference(opCompEClass, OP_COMP__IZQ);
    createEReference(opCompEClass, OP_COMP__DER);

    expresionBooleanaSimpleEClass = createEClass(EXPRESION_BOOLEANA_SIMPLE);
    createEAttribute(expresionBooleanaSimpleEClass, EXPRESION_BOOLEANA_SIMPLE__X);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    llamadoMetodoEClass.getESuperTypes().add(this.getInstruccion());
    funcionesEClass.getESuperTypes().add(this.getInstruccion());
    imprimirEClass.getESuperTypes().add(this.getInstruccion());
    imprimirSinSaltoDeLineaEClass.getESuperTypes().add(this.getInstruccion());
    condicionalEClass.getESuperTypes().add(this.getInstruccion());
    switchEClass.getESuperTypes().add(this.getInstruccion());
    forEClass.getESuperTypes().add(this.getInstruccion());
    whileEClass.getESuperTypes().add(this.getInstruccion());
    doWhileEClass.getESuperTypes().add(this.getInstruccion());
    declVariablesEClass.getESuperTypes().add(this.getInstruccion());
    asignacionVariableEClass.getESuperTypes().add(this.getInstruccion());
    llamadoVariableEClass.getESuperTypes().add(this.getExpresion());
    llamadoFuncionEClass.getESuperTypes().add(this.getExpresion());
    expresionDecimalEClass.getESuperTypes().add(this.getExpresion());
    expresionNegativoEClass.getESuperTypes().add(this.getExpresionDecimal());
    expresionSimpleXokasEClass.getESuperTypes().add(this.getExpresionDecimal());
    expresionSimpleAritmeticaEClass.getESuperTypes().add(this.getExpresionDecimal());
    expresionLongitudStringEClass.getESuperTypes().add(this.getExpresionDecimal());
    expresionAritmeticaEClass.getESuperTypes().add(this.getExpresionDecimal());
    sumaEClass.getESuperTypes().add(this.getExpresionAritmetica());
    restaEClass.getESuperTypes().add(this.getExpresionAritmetica());
    multiplicacionEClass.getESuperTypes().add(this.getExpresionAritmetica());
    divisionEClass.getESuperTypes().add(this.getExpresionAritmetica());
    moduloEClass.getESuperTypes().add(this.getExpresionAritmetica());
    expresionStringEClass.getESuperTypes().add(this.getExpresion());
    expresionSimpleStringEClass.getESuperTypes().add(this.getExpresionString());
    expresionConcatenacionEClass.getESuperTypes().add(this.getExpresionString());
    expresionBooleanaEClass.getESuperTypes().add(this.getExpresion());
    expresionOperacionesBooleanasEClass.getESuperTypes().add(this.getExpresionBooleana());
    operacionesBooleanasDeComparacionEClass.getESuperTypes().add(this.getExpresionOperacionesBooleanas());
    expresionStringVacioEClass.getESuperTypes().add(this.getExpresionOperacionesBooleanas());
    operadoresLogicosBooleanosEClass.getESuperTypes().add(this.getExpresionOperacionesBooleanas());
    operacionesBooleanasDeComparacionAritmeticaEClass.getESuperTypes().add(this.getExpresionOperacionesBooleanas());
    opNEGEClass.getESuperTypes().add(this.getExpresionOperacionesBooleanas());
    expresionBooleanaSimpleEClass.getESuperTypes().add(this.getExpresionBooleana());

    // Initialize classes and features; add operations and parameters
    initEClass(programaEClass, Programa.class, "Programa", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPrograma_Name(), ecorePackage.getEString(), "name", null, 0, 1, Programa.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPrograma_Ej(), this.getEjecucion(), null, "ej", null, 0, 1, Programa.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ejecucionEClass, Ejecucion.class, "Ejecucion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEjecucion_Instr(), this.getInstruccion(), null, "instr", null, 0, -1, Ejecucion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(instruccionEClass, Instruccion.class, "Instruccion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(llamadoMetodoEClass, LlamadoMetodo.class, "LlamadoMetodo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLlamadoMetodo_Method(), this.getFunciones(), null, "method", null, 0, 1, LlamadoMetodo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLlamadoMetodo_Args(), this.getExpresion(), null, "args", null, 0, -1, LlamadoMetodo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(funcionesEClass, Funciones.class, "Funciones", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunciones_TipoDeDato(), ecorePackage.getEString(), "tipoDeDato", null, 0, 1, Funciones.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFunciones_Name(), ecorePackage.getEString(), "name", null, 0, 1, Funciones.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunciones_Param(), this.getDeclVariables(), null, "param", null, 0, -1, Funciones.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunciones_Instr(), this.getInstruccion(), null, "instr", null, 0, -1, Funciones.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunciones_E(), this.getExpresion(), null, "e", null, 0, 1, Funciones.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(imprimirEClass, Imprimir.class, "Imprimir", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getImprimir_E(), this.getExpresion(), null, "e", null, 0, 1, Imprimir.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getImprimir_E1(), this.getExpresion(), null, "e1", null, 0, -1, Imprimir.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(imprimirSinSaltoDeLineaEClass, ImprimirSinSaltoDeLinea.class, "ImprimirSinSaltoDeLinea", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getImprimirSinSaltoDeLinea_E(), this.getExpresion(), null, "e", null, 0, 1, ImprimirSinSaltoDeLinea.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getImprimirSinSaltoDeLinea_E1(), this.getExpresion(), null, "e1", null, 0, -1, ImprimirSinSaltoDeLinea.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(condicionalEClass, Condicional.class, "Condicional", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondicional_Expr(), this.getExpresion(), null, "expr", null, 0, 1, Condicional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondicional_Instr(), this.getInstruccion(), null, "instr", null, 0, -1, Condicional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondicional_CasiTeam(), this.getCondicionalElseIf(), null, "casiTeam", null, 0, -1, Condicional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondicional_InstrElse(), this.getInstruccion(), null, "instrElse", null, 0, -1, Condicional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(condicionalElseIfEClass, CondicionalElseIf.class, "CondicionalElseIf", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondicionalElseIf_ExprELIF(), this.getExpresion(), null, "exprELIF", null, 0, 1, CondicionalElseIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondicionalElseIf_InstrELIF(), this.getInstruccion(), null, "instrELIF", null, 0, -1, CondicionalElseIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(switchEClass, Switch.class, "Switch", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSwitch_Var(), this.getLlamadoVariable(), null, "var", null, 0, 1, Switch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSwitch_Case(), this.getCaseSwitch(), null, "case", null, 0, -1, Switch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseSwitchEClass, CaseSwitch.class, "CaseSwitch", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseSwitch_E(), this.getExpresion(), null, "e", null, 0, 1, CaseSwitch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseSwitch_Instr(), this.getInstruccion(), null, "instr", null, 0, -1, CaseSwitch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forEClass, For.class, "For", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFor_Name(), ecorePackage.getEString(), "name", null, 0, 1, For.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFor_Var(), this.getDeclVariables(), null, "var", null, 0, 1, For.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFor_Expr(), this.getExpresionBooleana(), null, "expr", null, 0, 1, For.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFor_Asig(), this.getAsignacionVariable(), null, "asig", null, 0, 1, For.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFor_Instr(), this.getInstruccion(), null, "instr", null, 0, -1, For.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(whileEClass, While.class, "While", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getWhile_Name(), ecorePackage.getEString(), "name", null, 0, 1, While.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhile_Expr(), this.getExpresion(), null, "expr", null, 0, 1, While.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhile_Instr(), this.getInstruccion(), null, "instr", null, 0, -1, While.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(doWhileEClass, DoWhile.class, "DoWhile", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDoWhile_Name(), ecorePackage.getEString(), "name", null, 0, 1, DoWhile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDoWhile_Instr(), this.getInstruccion(), null, "instr", null, 0, -1, DoWhile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDoWhile_Expr(), this.getExpresion(), null, "expr", null, 0, 1, DoWhile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(declVariablesEClass, DeclVariables.class, "DeclVariables", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDeclVariables_TipoDeDato(), ecorePackage.getEString(), "tipoDeDato", null, 0, 1, DeclVariables.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeclVariables_Name(), ecorePackage.getEString(), "name", null, 0, 1, DeclVariables.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeclVariables_Valor(), this.getExpresion(), null, "valor", null, 0, 1, DeclVariables.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(asignacionVariableEClass, AsignacionVariable.class, "AsignacionVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAsignacionVariable_Variable(), this.getDeclVariables(), null, "variable", null, 0, 1, AsignacionVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAsignacionVariable_Valor(), this.getExpresion(), null, "valor", null, 0, 1, AsignacionVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionEClass, Expresion.class, "Expresion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(llamadoVariableEClass, LlamadoVariable.class, "LlamadoVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLlamadoVariable_Variable(), this.getDeclVariables(), null, "variable", null, 0, 1, LlamadoVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(llamadoFuncionEClass, LlamadoFuncion.class, "LlamadoFuncion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLlamadoFuncion_Func(), this.getFunciones(), null, "func", null, 0, 1, LlamadoFuncion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLlamadoFuncion_Args(), this.getExpresion(), null, "args", null, 0, -1, LlamadoFuncion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionDecimalEClass, ExpresionDecimal.class, "ExpresionDecimal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expresionNegativoEClass, ExpresionNegativo.class, "ExpresionNegativo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpresionNegativo_E(), this.getExpresion(), null, "e", null, 0, 1, ExpresionNegativo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionSimpleXokasEClass, ExpresionSimpleXokas.class, "ExpresionSimpleXokas", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExpresionSimpleXokas_X(), ecorePackage.getEInt(), "x", null, 0, 1, ExpresionSimpleXokas.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpresionSimpleXokas_Y(), ecorePackage.getEInt(), "y", null, 0, 1, ExpresionSimpleXokas.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpresionSimpleXokas_Z(), ecorePackage.getEInt(), "z", null, 0, 1, ExpresionSimpleXokas.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionSimpleAritmeticaEClass, ExpresionSimpleAritmetica.class, "ExpresionSimpleAritmetica", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExpresionSimpleAritmetica_X(), ecorePackage.getEInt(), "x", null, 0, 1, ExpresionSimpleAritmetica.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionLongitudStringEClass, ExpresionLongitudString.class, "ExpresionLongitudString", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpresionLongitudString_Llamado(), this.getExpresion(), null, "llamado", null, 0, 1, ExpresionLongitudString.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionAritmeticaEClass, ExpresionAritmetica.class, "ExpresionAritmetica", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpresionAritmetica_Op(), this.getOperacion(), null, "op", null, 0, 1, ExpresionAritmetica.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sumaEClass, Suma.class, "Suma", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(restaEClass, Resta.class, "Resta", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(multiplicacionEClass, Multiplicacion.class, "Multiplicacion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(divisionEClass, Division.class, "Division", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(moduloEClass, Modulo.class, "Modulo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(operacionEClass, Operacion.class, "Operacion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOperacion_Izq(), this.getExpresion(), null, "izq", null, 0, 1, Operacion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperacion_Der(), this.getExpresion(), null, "der", null, 0, 1, Operacion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionStringEClass, ExpresionString.class, "ExpresionString", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expresionSimpleStringEClass, ExpresionSimpleString.class, "ExpresionSimpleString", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExpresionSimpleString_X(), ecorePackage.getEString(), "x", null, 0, 1, ExpresionSimpleString.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionConcatenacionEClass, ExpresionConcatenacion.class, "ExpresionConcatenacion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpresionConcatenacion_Primero(), this.getExpresion(), null, "primero", null, 0, 1, ExpresionConcatenacion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpresionConcatenacion_Segundo(), this.getExpresion(), null, "segundo", null, 0, 1, ExpresionConcatenacion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionBooleanaEClass, ExpresionBooleana.class, "ExpresionBooleana", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expresionOperacionesBooleanasEClass, ExpresionOperacionesBooleanas.class, "ExpresionOperacionesBooleanas", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(operacionesBooleanasDeComparacionEClass, OperacionesBooleanasDeComparacion.class, "OperacionesBooleanasDeComparacion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOperacionesBooleanasDeComparacion_X(), ecorePackage.getEString(), "x", null, 0, 1, OperacionesBooleanasDeComparacion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperacionesBooleanasDeComparacion_Izq(), this.getExpresion(), null, "izq", null, 0, 1, OperacionesBooleanasDeComparacion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOperacionesBooleanasDeComparacion_Y(), ecorePackage.getEString(), "y", null, 0, 1, OperacionesBooleanasDeComparacion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperacionesBooleanasDeComparacion_Der(), this.getExpresion(), null, "der", null, 0, 1, OperacionesBooleanasDeComparacion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionStringVacioEClass, ExpresionStringVacio.class, "ExpresionStringVacio", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpresionStringVacio_Llamado(), this.getExpresion(), null, "llamado", null, 0, 1, ExpresionStringVacio.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(operadoresLogicosBooleanosEClass, OperadoresLogicosBooleanos.class, "OperadoresLogicosBooleanos", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOperadoresLogicosBooleanos_X(), ecorePackage.getEString(), "x", null, 0, 1, OperadoresLogicosBooleanos.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperadoresLogicosBooleanos_Izq(), this.getExpresion(), null, "izq", null, 0, 1, OperadoresLogicosBooleanos.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOperadoresLogicosBooleanos_Y(), ecorePackage.getEString(), "y", null, 0, 1, OperadoresLogicosBooleanos.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperadoresLogicosBooleanos_Der(), this.getExpresion(), null, "der", null, 0, 1, OperadoresLogicosBooleanos.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(operacionesBooleanasDeComparacionAritmeticaEClass, OperacionesBooleanasDeComparacionAritmetica.class, "OperacionesBooleanasDeComparacionAritmetica", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOperacionesBooleanasDeComparacionAritmetica_X(), ecorePackage.getEString(), "x", null, 0, 1, OperacionesBooleanasDeComparacionAritmetica.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperacionesBooleanasDeComparacionAritmetica_Op(), this.getOpComp(), null, "op", null, 0, 1, OperacionesBooleanasDeComparacionAritmetica.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(opNEGEClass, OpNEG.class, "OpNEG", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOpNEG_Expr(), this.getExpresion(), null, "expr", null, 0, 1, OpNEG.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(opCompEClass, OpComp.class, "OpComp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOpComp_Izq(), this.getExpresion(), null, "izq", null, 0, 1, OpComp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOpComp_Der(), this.getExpresion(), null, "der", null, 0, 1, OpComp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expresionBooleanaSimpleEClass, ExpresionBooleanaSimple.class, "ExpresionBooleanaSimple", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExpresionBooleanaSimple_X(), ecorePackage.getEString(), "x", null, 0, 1, ExpresionBooleanaSimple.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //PolePackageImpl

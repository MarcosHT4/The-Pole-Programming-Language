/**
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.pole.impl;

import edu.upb.lp.isc.pole.CondicionalElseIf;
import edu.upb.lp.isc.pole.Expresion;
import edu.upb.lp.isc.pole.Instruccion;
import edu.upb.lp.isc.pole.PolePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condicional Else If</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.upb.lp.isc.pole.impl.CondicionalElseIfImpl#getExprELIF <em>Expr ELIF</em>}</li>
 *   <li>{@link edu.upb.lp.isc.pole.impl.CondicionalElseIfImpl#getInstrELIF <em>Instr ELIF</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CondicionalElseIfImpl extends MinimalEObjectImpl.Container implements CondicionalElseIf
{
  /**
   * The cached value of the '{@link #getExprELIF() <em>Expr ELIF</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprELIF()
   * @generated
   * @ordered
   */
  protected Expresion exprELIF;

  /**
   * The cached value of the '{@link #getInstrELIF() <em>Instr ELIF</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstrELIF()
   * @generated
   * @ordered
   */
  protected EList<Instruccion> instrELIF;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CondicionalElseIfImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PolePackage.Literals.CONDICIONAL_ELSE_IF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expresion getExprELIF()
  {
    return exprELIF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprELIF(Expresion newExprELIF, NotificationChain msgs)
  {
    Expresion oldExprELIF = exprELIF;
    exprELIF = newExprELIF;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF, oldExprELIF, newExprELIF);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExprELIF(Expresion newExprELIF)
  {
    if (newExprELIF != exprELIF)
    {
      NotificationChain msgs = null;
      if (exprELIF != null)
        msgs = ((InternalEObject)exprELIF).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF, null, msgs);
      if (newExprELIF != null)
        msgs = ((InternalEObject)newExprELIF).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF, null, msgs);
      msgs = basicSetExprELIF(newExprELIF, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF, newExprELIF, newExprELIF));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Instruccion> getInstrELIF()
  {
    if (instrELIF == null)
    {
      instrELIF = new EObjectContainmentEList<Instruccion>(Instruccion.class, this, PolePackage.CONDICIONAL_ELSE_IF__INSTR_ELIF);
    }
    return instrELIF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF:
        return basicSetExprELIF(null, msgs);
      case PolePackage.CONDICIONAL_ELSE_IF__INSTR_ELIF:
        return ((InternalEList<?>)getInstrELIF()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF:
        return getExprELIF();
      case PolePackage.CONDICIONAL_ELSE_IF__INSTR_ELIF:
        return getInstrELIF();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF:
        setExprELIF((Expresion)newValue);
        return;
      case PolePackage.CONDICIONAL_ELSE_IF__INSTR_ELIF:
        getInstrELIF().clear();
        getInstrELIF().addAll((Collection<? extends Instruccion>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF:
        setExprELIF((Expresion)null);
        return;
      case PolePackage.CONDICIONAL_ELSE_IF__INSTR_ELIF:
        getInstrELIF().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PolePackage.CONDICIONAL_ELSE_IF__EXPR_ELIF:
        return exprELIF != null;
      case PolePackage.CONDICIONAL_ELSE_IF__INSTR_ELIF:
        return instrELIF != null && !instrELIF.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CondicionalElseIfImpl

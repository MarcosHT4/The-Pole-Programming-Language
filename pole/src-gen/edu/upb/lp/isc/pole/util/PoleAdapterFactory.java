/**
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.pole.util;

import edu.upb.lp.isc.pole.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edu.upb.lp.isc.pole.PolePackage
 * @generated
 */
public class PoleAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PolePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PoleAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = PolePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PoleSwitch<Adapter> modelSwitch =
    new PoleSwitch<Adapter>()
    {
      @Override
      public Adapter casePrograma(Programa object)
      {
        return createProgramaAdapter();
      }
      @Override
      public Adapter caseEjecucion(Ejecucion object)
      {
        return createEjecucionAdapter();
      }
      @Override
      public Adapter caseInstruccion(Instruccion object)
      {
        return createInstruccionAdapter();
      }
      @Override
      public Adapter caseLlamadoMetodo(LlamadoMetodo object)
      {
        return createLlamadoMetodoAdapter();
      }
      @Override
      public Adapter caseFunciones(Funciones object)
      {
        return createFuncionesAdapter();
      }
      @Override
      public Adapter caseImprimir(Imprimir object)
      {
        return createImprimirAdapter();
      }
      @Override
      public Adapter caseImprimirSinSaltoDeLinea(ImprimirSinSaltoDeLinea object)
      {
        return createImprimirSinSaltoDeLineaAdapter();
      }
      @Override
      public Adapter caseCondicional(Condicional object)
      {
        return createCondicionalAdapter();
      }
      @Override
      public Adapter caseCondicionalElseIf(CondicionalElseIf object)
      {
        return createCondicionalElseIfAdapter();
      }
      @Override
      public Adapter caseSwitch(Switch object)
      {
        return createSwitchAdapter();
      }
      @Override
      public Adapter caseCaseSwitch(CaseSwitch object)
      {
        return createCaseSwitchAdapter();
      }
      @Override
      public Adapter caseFor(For object)
      {
        return createForAdapter();
      }
      @Override
      public Adapter caseWhile(While object)
      {
        return createWhileAdapter();
      }
      @Override
      public Adapter caseDoWhile(DoWhile object)
      {
        return createDoWhileAdapter();
      }
      @Override
      public Adapter caseDeclVariables(DeclVariables object)
      {
        return createDeclVariablesAdapter();
      }
      @Override
      public Adapter caseAsignacionVariable(AsignacionVariable object)
      {
        return createAsignacionVariableAdapter();
      }
      @Override
      public Adapter caseExpresion(Expresion object)
      {
        return createExpresionAdapter();
      }
      @Override
      public Adapter caseLlamadoVariable(LlamadoVariable object)
      {
        return createLlamadoVariableAdapter();
      }
      @Override
      public Adapter caseLlamadoFuncion(LlamadoFuncion object)
      {
        return createLlamadoFuncionAdapter();
      }
      @Override
      public Adapter caseExpresionDecimal(ExpresionDecimal object)
      {
        return createExpresionDecimalAdapter();
      }
      @Override
      public Adapter caseExpresionNegativo(ExpresionNegativo object)
      {
        return createExpresionNegativoAdapter();
      }
      @Override
      public Adapter caseExpresionSimpleXokas(ExpresionSimpleXokas object)
      {
        return createExpresionSimpleXokasAdapter();
      }
      @Override
      public Adapter caseExpresionSimpleAritmetica(ExpresionSimpleAritmetica object)
      {
        return createExpresionSimpleAritmeticaAdapter();
      }
      @Override
      public Adapter caseExpresionLongitudString(ExpresionLongitudString object)
      {
        return createExpresionLongitudStringAdapter();
      }
      @Override
      public Adapter caseExpresionAritmetica(ExpresionAritmetica object)
      {
        return createExpresionAritmeticaAdapter();
      }
      @Override
      public Adapter caseSuma(Suma object)
      {
        return createSumaAdapter();
      }
      @Override
      public Adapter caseResta(Resta object)
      {
        return createRestaAdapter();
      }
      @Override
      public Adapter caseMultiplicacion(Multiplicacion object)
      {
        return createMultiplicacionAdapter();
      }
      @Override
      public Adapter caseDivision(Division object)
      {
        return createDivisionAdapter();
      }
      @Override
      public Adapter caseModulo(Modulo object)
      {
        return createModuloAdapter();
      }
      @Override
      public Adapter caseOperacion(Operacion object)
      {
        return createOperacionAdapter();
      }
      @Override
      public Adapter caseExpresionString(ExpresionString object)
      {
        return createExpresionStringAdapter();
      }
      @Override
      public Adapter caseExpresionSimpleString(ExpresionSimpleString object)
      {
        return createExpresionSimpleStringAdapter();
      }
      @Override
      public Adapter caseExpresionConcatenacion(ExpresionConcatenacion object)
      {
        return createExpresionConcatenacionAdapter();
      }
      @Override
      public Adapter caseExpresionBooleana(ExpresionBooleana object)
      {
        return createExpresionBooleanaAdapter();
      }
      @Override
      public Adapter caseExpresionOperacionesBooleanas(ExpresionOperacionesBooleanas object)
      {
        return createExpresionOperacionesBooleanasAdapter();
      }
      @Override
      public Adapter caseOperacionesBooleanasDeComparacion(OperacionesBooleanasDeComparacion object)
      {
        return createOperacionesBooleanasDeComparacionAdapter();
      }
      @Override
      public Adapter caseExpresionStringVacio(ExpresionStringVacio object)
      {
        return createExpresionStringVacioAdapter();
      }
      @Override
      public Adapter caseOperadoresLogicosBooleanos(OperadoresLogicosBooleanos object)
      {
        return createOperadoresLogicosBooleanosAdapter();
      }
      @Override
      public Adapter caseOperacionesBooleanasDeComparacionAritmetica(OperacionesBooleanasDeComparacionAritmetica object)
      {
        return createOperacionesBooleanasDeComparacionAritmeticaAdapter();
      }
      @Override
      public Adapter caseOpNEG(OpNEG object)
      {
        return createOpNEGAdapter();
      }
      @Override
      public Adapter caseOpComp(OpComp object)
      {
        return createOpCompAdapter();
      }
      @Override
      public Adapter caseExpresionBooleanaSimple(ExpresionBooleanaSimple object)
      {
        return createExpresionBooleanaSimpleAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Programa <em>Programa</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Programa
   * @generated
   */
  public Adapter createProgramaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Ejecucion <em>Ejecucion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Ejecucion
   * @generated
   */
  public Adapter createEjecucionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Instruccion <em>Instruccion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Instruccion
   * @generated
   */
  public Adapter createInstruccionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.LlamadoMetodo <em>Llamado Metodo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.LlamadoMetodo
   * @generated
   */
  public Adapter createLlamadoMetodoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Funciones <em>Funciones</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Funciones
   * @generated
   */
  public Adapter createFuncionesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Imprimir <em>Imprimir</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Imprimir
   * @generated
   */
  public Adapter createImprimirAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ImprimirSinSaltoDeLinea <em>Imprimir Sin Salto De Linea</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ImprimirSinSaltoDeLinea
   * @generated
   */
  public Adapter createImprimirSinSaltoDeLineaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Condicional <em>Condicional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Condicional
   * @generated
   */
  public Adapter createCondicionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.CondicionalElseIf <em>Condicional Else If</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.CondicionalElseIf
   * @generated
   */
  public Adapter createCondicionalElseIfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Switch <em>Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Switch
   * @generated
   */
  public Adapter createSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.CaseSwitch <em>Case Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.CaseSwitch
   * @generated
   */
  public Adapter createCaseSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.For <em>For</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.For
   * @generated
   */
  public Adapter createForAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.While <em>While</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.While
   * @generated
   */
  public Adapter createWhileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.DoWhile <em>Do While</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.DoWhile
   * @generated
   */
  public Adapter createDoWhileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.DeclVariables <em>Decl Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.DeclVariables
   * @generated
   */
  public Adapter createDeclVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.AsignacionVariable <em>Asignacion Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.AsignacionVariable
   * @generated
   */
  public Adapter createAsignacionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Expresion <em>Expresion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Expresion
   * @generated
   */
  public Adapter createExpresionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.LlamadoVariable <em>Llamado Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.LlamadoVariable
   * @generated
   */
  public Adapter createLlamadoVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.LlamadoFuncion <em>Llamado Funcion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.LlamadoFuncion
   * @generated
   */
  public Adapter createLlamadoFuncionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionDecimal <em>Expresion Decimal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionDecimal
   * @generated
   */
  public Adapter createExpresionDecimalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionNegativo <em>Expresion Negativo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionNegativo
   * @generated
   */
  public Adapter createExpresionNegativoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionSimpleXokas <em>Expresion Simple Xokas</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionSimpleXokas
   * @generated
   */
  public Adapter createExpresionSimpleXokasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionSimpleAritmetica <em>Expresion Simple Aritmetica</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionSimpleAritmetica
   * @generated
   */
  public Adapter createExpresionSimpleAritmeticaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionLongitudString <em>Expresion Longitud String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionLongitudString
   * @generated
   */
  public Adapter createExpresionLongitudStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionAritmetica <em>Expresion Aritmetica</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionAritmetica
   * @generated
   */
  public Adapter createExpresionAritmeticaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Suma <em>Suma</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Suma
   * @generated
   */
  public Adapter createSumaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Resta <em>Resta</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Resta
   * @generated
   */
  public Adapter createRestaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Multiplicacion <em>Multiplicacion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Multiplicacion
   * @generated
   */
  public Adapter createMultiplicacionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Division <em>Division</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Division
   * @generated
   */
  public Adapter createDivisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Modulo <em>Modulo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Modulo
   * @generated
   */
  public Adapter createModuloAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.Operacion <em>Operacion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.Operacion
   * @generated
   */
  public Adapter createOperacionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionString <em>Expresion String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionString
   * @generated
   */
  public Adapter createExpresionStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionSimpleString <em>Expresion Simple String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionSimpleString
   * @generated
   */
  public Adapter createExpresionSimpleStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionConcatenacion <em>Expresion Concatenacion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionConcatenacion
   * @generated
   */
  public Adapter createExpresionConcatenacionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionBooleana <em>Expresion Booleana</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionBooleana
   * @generated
   */
  public Adapter createExpresionBooleanaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionOperacionesBooleanas <em>Expresion Operaciones Booleanas</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionOperacionesBooleanas
   * @generated
   */
  public Adapter createExpresionOperacionesBooleanasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.OperacionesBooleanasDeComparacion <em>Operaciones Booleanas De Comparacion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.OperacionesBooleanasDeComparacion
   * @generated
   */
  public Adapter createOperacionesBooleanasDeComparacionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionStringVacio <em>Expresion String Vacio</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionStringVacio
   * @generated
   */
  public Adapter createExpresionStringVacioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.OperadoresLogicosBooleanos <em>Operadores Logicos Booleanos</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.OperadoresLogicosBooleanos
   * @generated
   */
  public Adapter createOperadoresLogicosBooleanosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.OperacionesBooleanasDeComparacionAritmetica <em>Operaciones Booleanas De Comparacion Aritmetica</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.OperacionesBooleanasDeComparacionAritmetica
   * @generated
   */
  public Adapter createOperacionesBooleanasDeComparacionAritmeticaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.OpNEG <em>Op NEG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.OpNEG
   * @generated
   */
  public Adapter createOpNEGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.OpComp <em>Op Comp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.OpComp
   * @generated
   */
  public Adapter createOpCompAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.pole.ExpresionBooleanaSimple <em>Expresion Booleana Simple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.pole.ExpresionBooleanaSimple
   * @generated
   */
  public Adapter createExpresionBooleanaSimpleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //PoleAdapterFactory

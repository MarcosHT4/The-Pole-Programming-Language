/*
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PoleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cPOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEjAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEjEjecucionParserRuleCall_2_0 = (RuleCall)cEjAssignment_2.eContents().get(0);
		private final Keyword cLEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Programa:
		//    name = ID "PO"
		//    ej=(Ejecucion)
		//    "LE"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID "PO"
		//ej=(Ejecucion)
		//"LE"
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"PO"
		public Keyword getPOKeyword_1() { return cPOKeyword_1; }
		
		//ej=(Ejecucion)
		public Assignment getEjAssignment_2() { return cEjAssignment_2; }
		
		//(Ejecucion)
		public RuleCall getEjEjecucionParserRuleCall_2_0() { return cEjEjecucionParserRuleCall_2_0; }
		
		//"LE"
		public Keyword getLEKeyword_3() { return cLEKeyword_3; }
	}
	public class EjecucionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Ejecucion");
		private final Assignment cInstrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstrInstruccionParserRuleCall_0 = (RuleCall)cInstrAssignment.eContents().get(0);
		
		//Ejecucion:
		//    instr+=Instruccion+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//instr+=Instruccion+
		public Assignment getInstrAssignment() { return cInstrAssignment; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_0() { return cInstrInstruccionParserRuleCall_0; }
	}
	public class InstruccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Instruccion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclVariablesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImprimirParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCondicionalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSwitchParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWhileParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDoWhileParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFuncionesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAsignacionVariableParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLlamadoMetodoParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cImprimirSinSaltoDeLineaParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Instruccion:
		//    DeclVariables | Imprimir | Condicional | Switch | For | While | DoWhile | Funciones | AsignacionVariable | LlamadoMetodo | ImprimirSinSaltoDeLinea
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclVariables | Imprimir | Condicional | Switch | For | While | DoWhile | Funciones | AsignacionVariable | LlamadoMetodo | ImprimirSinSaltoDeLinea
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclVariables
		public RuleCall getDeclVariablesParserRuleCall_0() { return cDeclVariablesParserRuleCall_0; }
		
		//Imprimir
		public RuleCall getImprimirParserRuleCall_1() { return cImprimirParserRuleCall_1; }
		
		//Condicional
		public RuleCall getCondicionalParserRuleCall_2() { return cCondicionalParserRuleCall_2; }
		
		//Switch
		public RuleCall getSwitchParserRuleCall_3() { return cSwitchParserRuleCall_3; }
		
		//For
		public RuleCall getForParserRuleCall_4() { return cForParserRuleCall_4; }
		
		//While
		public RuleCall getWhileParserRuleCall_5() { return cWhileParserRuleCall_5; }
		
		//DoWhile
		public RuleCall getDoWhileParserRuleCall_6() { return cDoWhileParserRuleCall_6; }
		
		//Funciones
		public RuleCall getFuncionesParserRuleCall_7() { return cFuncionesParserRuleCall_7; }
		
		//AsignacionVariable
		public RuleCall getAsignacionVariableParserRuleCall_8() { return cAsignacionVariableParserRuleCall_8; }
		
		//LlamadoMetodo
		public RuleCall getLlamadoMetodoParserRuleCall_9() { return cLlamadoMetodoParserRuleCall_9; }
		
		//ImprimirSinSaltoDeLinea
		public RuleCall getImprimirSinSaltoDeLineaParserRuleCall_10() { return cImprimirSinSaltoDeLineaParserRuleCall_10; }
	}
	public class LlamadoMetodoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.LlamadoMetodo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEYYOLVIDONAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodFuncionesCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodFuncionesIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodFuncionesCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEYKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpresionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LlamadoMetodo:
		//    "EYYOLVIDONA" method=[Funciones] "("("EY" args+=Expresion)*")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"EYYOLVIDONA" method=[Funciones] "("("EY" args+=Expresion)*")"
		public Group getGroup() { return cGroup; }
		
		//"EYYOLVIDONA"
		public Keyword getEYYOLVIDONAKeyword_0() { return cEYYOLVIDONAKeyword_0; }
		
		//method=[Funciones]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[Funciones]
		public CrossReference getMethodFuncionesCrossReference_1_0() { return cMethodFuncionesCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodFuncionesIDTerminalRuleCall_1_0_1() { return cMethodFuncionesIDTerminalRuleCall_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//("EY" args+=Expresion)*
		public Group getGroup_3() { return cGroup_3; }
		
		//"EY"
		public Keyword getEYKeyword_3_0() { return cEYKeyword_3_0; }
		
		//args+=Expresion
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expresion
		public RuleCall getArgsExpresionParserRuleCall_3_1_0() { return cArgsExpresionParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FuncionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Funciones");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOIGOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTipoDeDatoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoDeDatoTipoDeDatoParserRuleCall_1_0 = (RuleCall)cTipoDeDatoAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMUYKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamDeclVariables2ParserRuleCall_3_1_0 = (RuleCall)cParamAssignment_3_1.eContents().get(0);
		private final Assignment cInstrAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstrInstruccionParserRuleCall_4_0 = (RuleCall)cInstrAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPEROMUYKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEExpresionParserRuleCall_5_1_0 = (RuleCall)cEAssignment_5_1.eContents().get(0);
		private final Keyword cBORROSOKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////PEREMENNAYA MRBEAST hola -> EYYOLVIDONA hola2()
		////EYYOLVIDONA metodoVOID(EY 5, EY "Hola")
		//Funciones:
		//    "OIGO" tipoDeDato=TipoDeDato name=ID ("MUY" param+=DeclVariables2)*
		//        (instr+=Instruccion)*
		//        ("PEROMUY" e=Expresion)?
		//    "BORROSO"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"OIGO" tipoDeDato=TipoDeDato name=ID ("MUY" param+=DeclVariables2)*
		//    (instr+=Instruccion)*
		//    ("PEROMUY" e=Expresion)?
		//"BORROSO"
		public Group getGroup() { return cGroup; }
		
		//"OIGO"
		public Keyword getOIGOKeyword_0() { return cOIGOKeyword_0; }
		
		//tipoDeDato=TipoDeDato
		public Assignment getTipoDeDatoAssignment_1() { return cTipoDeDatoAssignment_1; }
		
		//TipoDeDato
		public RuleCall getTipoDeDatoTipoDeDatoParserRuleCall_1_0() { return cTipoDeDatoTipoDeDatoParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("MUY" param+=DeclVariables2)*
		public Group getGroup_3() { return cGroup_3; }
		
		//"MUY"
		public Keyword getMUYKeyword_3_0() { return cMUYKeyword_3_0; }
		
		//param+=DeclVariables2
		public Assignment getParamAssignment_3_1() { return cParamAssignment_3_1; }
		
		//DeclVariables2
		public RuleCall getParamDeclVariables2ParserRuleCall_3_1_0() { return cParamDeclVariables2ParserRuleCall_3_1_0; }
		
		//(instr+=Instruccion)*
		public Assignment getInstrAssignment_4() { return cInstrAssignment_4; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_4_0() { return cInstrInstruccionParserRuleCall_4_0; }
		
		//("PEROMUY" e=Expresion)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"PEROMUY"
		public Keyword getPEROMUYKeyword_5_0() { return cPEROMUYKeyword_5_0; }
		
		//e=Expresion
		public Assignment getEAssignment_5_1() { return cEAssignment_5_1; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_5_1_0() { return cEExpresionParserRuleCall_5_1_0; }
		
		//"BORROSO"
		public Keyword getBORROSOKeyword_6() { return cBORROSOKeyword_6; }
	}
	public class ImprimirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Imprimir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPARATICONDESPRECIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExpresionParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cE1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cE1ExpresionParserRuleCall_2_1_0 = (RuleCall)cE1Assignment_2_1.eContents().get(0);
		
		//Imprimir:
		//    "PARATICONDESPRECIO" (e=Expresion) ("@" e1+=Expresion)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"PARATICONDESPRECIO" (e=Expresion) ("@" e1+=Expresion)*
		public Group getGroup() { return cGroup; }
		
		//"PARATICONDESPRECIO"
		public Keyword getPARATICONDESPRECIOKeyword_0() { return cPARATICONDESPRECIOKeyword_0; }
		
		//(e=Expresion)
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_1_0() { return cEExpresionParserRuleCall_1_0; }
		
		//("@" e1+=Expresion)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }
		
		//e1+=Expresion
		public Assignment getE1Assignment_2_1() { return cE1Assignment_2_1; }
		
		//Expresion
		public RuleCall getE1ExpresionParserRuleCall_2_1_0() { return cE1ExpresionParserRuleCall_2_1_0; }
	}
	public class ImprimirSinSaltoDeLineaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ImprimirSinSaltoDeLinea");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPARATIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExpresionParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cE1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cE1ExpresionParserRuleCall_2_1_0 = (RuleCall)cE1Assignment_2_1.eContents().get(0);
		
		//ImprimirSinSaltoDeLinea:
		//    "PARATI" (e=Expresion) ("@" e1+=Expresion)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"PARATI" (e=Expresion) ("@" e1+=Expresion)*
		public Group getGroup() { return cGroup; }
		
		//"PARATI"
		public Keyword getPARATIKeyword_0() { return cPARATIKeyword_0; }
		
		//(e=Expresion)
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_1_0() { return cEExpresionParserRuleCall_1_0; }
		
		//("@" e1+=Expresion)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }
		
		//e1+=Expresion
		public Assignment getE1Assignment_2_1() { return cE1Assignment_2_1; }
		
		//Expresion
		public RuleCall getE1ExpresionParserRuleCall_2_1_0() { return cE1ExpresionParserRuleCall_2_1_0; }
	}
	public class CondicionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Condicional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpresionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cWITHTEAMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstrAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstrInstruccionParserRuleCall_3_0 = (RuleCall)cInstrAssignment_3.eContents().get(0);
		private final Assignment cCasiTeamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasiTeamCondicionalElseIfParserRuleCall_4_0 = (RuleCall)cCasiTeamAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cNOTEAMKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInstrElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInstrElseInstruccionParserRuleCall_5_1_0 = (RuleCall)cInstrElseAssignment_5_1.eContents().get(0);
		private final Keyword cEZKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Condicional:
		//      "GG?" expr=Expresion
		//          "WITHTEAM"
		//              instr+=Instruccion*
		//          (casiTeam+=CondicionalElseIf)*
		//         ("NOTEAM"
		//             instrElse+=Instruccion*)?
		//      "EZ"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"GG?" expr=Expresion
		//    "WITHTEAM"
		//        instr+=Instruccion*
		//    (casiTeam+=CondicionalElseIf)*
		//   ("NOTEAM"
		//       instrElse+=Instruccion*)?
		//"EZ"
		public Group getGroup() { return cGroup; }
		
		//"GG?"
		public Keyword getGGKeyword_0() { return cGGKeyword_0; }
		
		//expr=Expresion
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expresion
		public RuleCall getExprExpresionParserRuleCall_1_0() { return cExprExpresionParserRuleCall_1_0; }
		
		//"WITHTEAM"
		public Keyword getWITHTEAMKeyword_2() { return cWITHTEAMKeyword_2; }
		
		//instr+=Instruccion*
		public Assignment getInstrAssignment_3() { return cInstrAssignment_3; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_3_0() { return cInstrInstruccionParserRuleCall_3_0; }
		
		//(casiTeam+=CondicionalElseIf)*
		public Assignment getCasiTeamAssignment_4() { return cCasiTeamAssignment_4; }
		
		//CondicionalElseIf
		public RuleCall getCasiTeamCondicionalElseIfParserRuleCall_4_0() { return cCasiTeamCondicionalElseIfParserRuleCall_4_0; }
		
		//("NOTEAM"
		//    instrElse+=Instruccion*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"NOTEAM"
		public Keyword getNOTEAMKeyword_5_0() { return cNOTEAMKeyword_5_0; }
		
		//instrElse+=Instruccion*
		public Assignment getInstrElseAssignment_5_1() { return cInstrElseAssignment_5_1; }
		
		//Instruccion
		public RuleCall getInstrElseInstruccionParserRuleCall_5_1_0() { return cInstrElseInstruccionParserRuleCall_5_1_0; }
		
		//"EZ"
		public Keyword getEZKeyword_6() { return cEZKeyword_6; }
	}
	public class CondicionalElseIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.CondicionalElseIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASITEAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprELIFAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprELIFExpresionParserRuleCall_1_0 = (RuleCall)cExprELIFAssignment_1.eContents().get(0);
		private final Assignment cInstrELIFAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstrELIFInstruccionParserRuleCall_2_0 = (RuleCall)cInstrELIFAssignment_2.eContents().get(0);
		
		//CondicionalElseIf:
		//    "CASITEAM" exprELIF=Expresion
		//        (instrELIF += Instruccion)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"CASITEAM" exprELIF=Expresion
		//    (instrELIF += Instruccion)*
		public Group getGroup() { return cGroup; }
		
		//"CASITEAM"
		public Keyword getCASITEAMKeyword_0() { return cCASITEAMKeyword_0; }
		
		//exprELIF=Expresion
		public Assignment getExprELIFAssignment_1() { return cExprELIFAssignment_1; }
		
		//Expresion
		public RuleCall getExprELIFExpresionParserRuleCall_1_0() { return cExprELIFExpresionParserRuleCall_1_0; }
		
		//(instrELIF += Instruccion)*
		public Assignment getInstrELIFAssignment_2() { return cInstrELIFAssignment_2; }
		
		//Instruccion
		public RuleCall getInstrELIFInstruccionParserRuleCall_2_0() { return cInstrELIFInstruccionParserRuleCall_2_0; }
	}
	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarLlamadoVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cRULETARUSAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCaseCaseSwitchParserRuleCall_2_0 = (RuleCall)cCaseAssignment_2.eContents().get(0);
		private final Keyword cBOOMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Switch:
		//    var=LlamadoVariable "RULETARUSA?"
		//         (case += CaseSwitch)+
		//    "BOOM"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var=LlamadoVariable "RULETARUSA?"
		//     (case += CaseSwitch)+
		//"BOOM"
		public Group getGroup() { return cGroup; }
		
		//var=LlamadoVariable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//LlamadoVariable
		public RuleCall getVarLlamadoVariableParserRuleCall_0_0() { return cVarLlamadoVariableParserRuleCall_0_0; }
		
		//"RULETARUSA?"
		public Keyword getRULETARUSAKeyword_1() { return cRULETARUSAKeyword_1; }
		
		//(case += CaseSwitch)+
		public Assignment getCaseAssignment_2() { return cCaseAssignment_2; }
		
		//CaseSwitch
		public RuleCall getCaseCaseSwitchParserRuleCall_2_0() { return cCaseCaseSwitchParserRuleCall_2_0; }
		
		//"BOOM"
		public Keyword getBOOMKeyword_3() { return cBOOMKeyword_3; }
	}
	public class CaseSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.CaseSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBALAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExpresionParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Assignment cInstrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstrInstruccionParserRuleCall_2_0 = (RuleCall)cInstrAssignment_2.eContents().get(0);
		
		//CaseSwitch:
		//    "BALA" (e=Expresion) instr+=Instruccion*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"BALA" (e=Expresion) instr+=Instruccion*
		public Group getGroup() { return cGroup; }
		
		//"BALA"
		public Keyword getBALAKeyword_0() { return cBALAKeyword_0; }
		
		//(e=Expresion)
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_1_0() { return cEExpresionParserRuleCall_1_0; }
		
		//instr+=Instruccion*
		public Assignment getInstrAssignment_2() { return cInstrAssignment_2; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_2_0() { return cInstrInstruccionParserRuleCall_2_0; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHOCOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarDeclVariablesParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cYVOLOKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExpresionBooleanaParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cYYOVOLEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAsigAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAsigAsignacionVariableParserRuleCall_6_0 = (RuleCall)cAsigAssignment_6.eContents().get(0);
		private final Assignment cInstrAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInstrInstruccionParserRuleCall_7_0 = (RuleCall)cInstrAssignment_7.eContents().get(0);
		private final Keyword cYSEFUEKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//For:
		//    // x++
		//    // x -> x+1
		//    "CHOCO" name=ID (var = DeclVariables) "YVOLO" (expr=ExpresionBooleana) "YYOVOLE" asig=AsignacionVariable
		//        (instr+=Instruccion)*
		//    "YSEFUE"
		//    // Problema con variable, como hacer que la variable declarada aqui, pase a ser una declaracion de variable como tal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// x++
		//// x -> x+1
		//"CHOCO" name=ID (var = DeclVariables) "YVOLO" (expr=ExpresionBooleana) "YYOVOLE" asig=AsignacionVariable
		//    (instr+=Instruccion)*
		//"YSEFUE"
		public Group getGroup() { return cGroup; }
		
		//// x++
		//// x -> x+1
		//"CHOCO"
		public Keyword getCHOCOKeyword_0() { return cCHOCOKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(var = DeclVariables)
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//DeclVariables
		public RuleCall getVarDeclVariablesParserRuleCall_2_0() { return cVarDeclVariablesParserRuleCall_2_0; }
		
		//"YVOLO"
		public Keyword getYVOLOKeyword_3() { return cYVOLOKeyword_3; }
		
		//(expr=ExpresionBooleana)
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }
		
		//ExpresionBooleana
		public RuleCall getExprExpresionBooleanaParserRuleCall_4_0() { return cExprExpresionBooleanaParserRuleCall_4_0; }
		
		//"YYOVOLE"
		public Keyword getYYOVOLEKeyword_5() { return cYYOVOLEKeyword_5; }
		
		//asig=AsignacionVariable
		public Assignment getAsigAssignment_6() { return cAsigAssignment_6; }
		
		//AsignacionVariable
		public RuleCall getAsigAsignacionVariableParserRuleCall_6_0() { return cAsigAsignacionVariableParserRuleCall_6_0; }
		
		//(instr+=Instruccion)*
		public Assignment getInstrAssignment_7() { return cInstrAssignment_7; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_7_0() { return cInstrInstruccionParserRuleCall_7_0; }
		
		//"YSEFUE"
		public Keyword getYSEFUEKeyword_8() { return cYSEFUEKeyword_8; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMATAOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpresionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Assignment cInstrAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstrInstruccionParserRuleCall_4_0 = (RuleCall)cInstrAssignment_4.eContents().get(0);
		private final Keyword cPACOKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//While:
		//    "SA" name=ID "MATAO" expr=Expresion
		//        (instr+=Instruccion)*
		//    "PACO"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"SA" name=ID "MATAO" expr=Expresion
		//    (instr+=Instruccion)*
		//"PACO"
		public Group getGroup() { return cGroup; }
		
		//"SA"
		public Keyword getSAKeyword_0() { return cSAKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"MATAO"
		public Keyword getMATAOKeyword_2() { return cMATAOKeyword_2; }
		
		//expr=Expresion
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expresion
		public RuleCall getExprExpresionParserRuleCall_3_0() { return cExprExpresionParserRuleCall_3_0; }
		
		//(instr+=Instruccion)*
		public Assignment getInstrAssignment_4() { return cInstrAssignment_4; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_4_0() { return cInstrInstruccionParserRuleCall_4_0; }
		
		//"PACO"
		public Keyword getPACOKeyword_5() { return cPACOKeyword_5; }
	}
	public class DoWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.DoWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAHITEVAMIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInstrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstrInstruccionParserRuleCall_2_0 = (RuleCall)cInstrAssignment_2.eContents().get(0);
		private final Keyword cDOLORKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExpresionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		
		//DoWhile:
		//    "AHITEVAMI" name=ID
		//        (instr+=Instruccion)*
		//    "DOLOR" expr=Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"AHITEVAMI" name=ID
		//    (instr+=Instruccion)*
		//"DOLOR" expr=Expresion
		public Group getGroup() { return cGroup; }
		
		//"AHITEVAMI"
		public Keyword getAHITEVAMIKeyword_0() { return cAHITEVAMIKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(instr+=Instruccion)*
		public Assignment getInstrAssignment_2() { return cInstrAssignment_2; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_2_0() { return cInstrInstruccionParserRuleCall_2_0; }
		
		//"DOLOR"
		public Keyword getDOLORKeyword_3() { return cDOLORKeyword_3; }
		
		//expr=Expresion
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }
		
		//Expresion
		public RuleCall getExprExpresionParserRuleCall_4_0() { return cExprExpresionParserRuleCall_4_0; }
	}
	public class DeclVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.DeclVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPEREMENNAYAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTipoDeDatoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoDeDatoTipoDeDatoParserRuleCall_1_0 = (RuleCall)cTipoDeDatoAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorExpresionParserRuleCall_4_0 = (RuleCall)cValorAssignment_4.eContents().get(0);
		
		//DeclVariables:
		//    "PEREMENNAYA" tipoDeDato=TipoDeDato name=ID "->" valor=Expresion //Delimitar expresion con el Validator?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"PEREMENNAYA" tipoDeDato=TipoDeDato name=ID "->" valor=Expresion
		public Group getGroup() { return cGroup; }
		
		//"PEREMENNAYA"
		public Keyword getPEREMENNAYAKeyword_0() { return cPEREMENNAYAKeyword_0; }
		
		//tipoDeDato=TipoDeDato
		public Assignment getTipoDeDatoAssignment_1() { return cTipoDeDatoAssignment_1; }
		
		//TipoDeDato
		public RuleCall getTipoDeDatoTipoDeDatoParserRuleCall_1_0() { return cTipoDeDatoTipoDeDatoParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//valor=Expresion
		public Assignment getValorAssignment_4() { return cValorAssignment_4; }
		
		//Expresion
		public RuleCall getValorExpresionParserRuleCall_4_0() { return cValorExpresionParserRuleCall_4_0; }
	}
	public class DeclVariables2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.DeclVariables2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoDeDatoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoDeDatoTipoDeDatoParserRuleCall_0_0 = (RuleCall)cTipoDeDatoAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DeclVariables2 returns DeclVariables:
		//    tipoDeDato=TipoDeDato name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tipoDeDato=TipoDeDato name=ID
		public Group getGroup() { return cGroup; }
		
		//tipoDeDato=TipoDeDato
		public Assignment getTipoDeDatoAssignment_0() { return cTipoDeDatoAssignment_0; }
		
		//TipoDeDato
		public RuleCall getTipoDeDatoTipoDeDatoParserRuleCall_0_0() { return cTipoDeDatoTipoDeDatoParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AsignacionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.AsignacionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableDeclVariablesCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableDeclVariablesIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableDeclVariablesCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorExpresionParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		
		//AsignacionVariable:
		//    variable = [DeclVariables] "->" valor=Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variable = [DeclVariables] "->" valor=Expresion
		public Group getGroup() { return cGroup; }
		
		//variable = [DeclVariables]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[DeclVariables]
		public CrossReference getVariableDeclVariablesCrossReference_0_0() { return cVariableDeclVariablesCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableDeclVariablesIDTerminalRuleCall_0_0_1() { return cVariableDeclVariablesIDTerminalRuleCall_0_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//valor=Expresion
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }
		
		//Expresion
		public RuleCall getValorExpresionParserRuleCall_2_0() { return cValorExpresionParserRuleCall_2_0; }
	}
	public class TipoDeDatoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.TipoDeDato");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDALASKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMRBEASTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cXOKASKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cYINYANGKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMICORAZONKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//TipoDeDato:
		//    "DALAS" | "MRBEAST" | "XOKAS" | "YINYANG" | "MICORAZON" //DALAS = String, MRBEAST= Int, XOKAS = Double, YING = Boolean, MICORAZON = Void
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"DALAS" | "MRBEAST" | "XOKAS" | "YINYANG" | "MICORAZON"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"DALAS"
		public Keyword getDALASKeyword_0() { return cDALASKeyword_0; }
		
		//"MRBEAST"
		public Keyword getMRBEASTKeyword_1() { return cMRBEASTKeyword_1; }
		
		//"XOKAS"
		public Keyword getXOKASKeyword_2() { return cXOKASKeyword_2; }
		
		//"YINYANG"
		public Keyword getYINYANGKeyword_3() { return cYINYANGKeyword_3; }
		
		//"MICORAZON"
		public Keyword getMICORAZONKeyword_4() { return cMICORAZONKeyword_4; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Expresion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpresionDecimalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpresionStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpresionBooleanaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLlamadoVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLlamadoFuncionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expresion:
		//    ExpresionDecimal | ExpresionString | ExpresionBooleana |  LlamadoVariable | LlamadoFuncion //Problema con la gramatica ambigua
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpresionDecimal | ExpresionString | ExpresionBooleana |  LlamadoVariable | LlamadoFuncion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpresionDecimal
		public RuleCall getExpresionDecimalParserRuleCall_0() { return cExpresionDecimalParserRuleCall_0; }
		
		//ExpresionString
		public RuleCall getExpresionStringParserRuleCall_1() { return cExpresionStringParserRuleCall_1; }
		
		//ExpresionBooleana
		public RuleCall getExpresionBooleanaParserRuleCall_2() { return cExpresionBooleanaParserRuleCall_2; }
		
		//LlamadoVariable
		public RuleCall getLlamadoVariableParserRuleCall_3() { return cLlamadoVariableParserRuleCall_3; }
		
		//LlamadoFuncion
		public RuleCall getLlamadoFuncionParserRuleCall_4() { return cLlamadoFuncionParserRuleCall_4; }
	}
	public class LlamadoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.LlamadoVariable");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableDeclVariablesCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableDeclVariablesIDTerminalRuleCall_0_1 = (RuleCall)cVariableDeclVariablesCrossReference_0.eContents().get(1);
		
		//LlamadoVariable:
		//    variable=[DeclVariables]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[DeclVariables]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[DeclVariables]
		public CrossReference getVariableDeclVariablesCrossReference_0() { return cVariableDeclVariablesCrossReference_0; }
		
		//ID
		public RuleCall getVariableDeclVariablesIDTerminalRuleCall_0_1() { return cVariableDeclVariablesIDTerminalRuleCall_0_1; }
	}
	public class LlamadoFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.LlamadoFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEYYOLVIDONAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFuncFuncionesCrossReference_1_0 = (CrossReference)cFuncAssignment_1.eContents().get(0);
		private final RuleCall cFuncFuncionesIDTerminalRuleCall_1_0_1 = (RuleCall)cFuncFuncionesCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEYKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpresionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LlamadoFuncion:
		//    "EYYOLVIDONA" func=[Funciones] "("("EY" args+=Expresion)*")" //Validator, podemos verificar que si o si devuelve algo?
		//                                                            //Validator, numero de argumentos
		//                                                            //Esto lo hace ambigua a la gramatica :C
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"EYYOLVIDONA" func=[Funciones] "("("EY" args+=Expresion)*")"
		public Group getGroup() { return cGroup; }
		
		//"EYYOLVIDONA"
		public Keyword getEYYOLVIDONAKeyword_0() { return cEYYOLVIDONAKeyword_0; }
		
		//func=[Funciones]
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//[Funciones]
		public CrossReference getFuncFuncionesCrossReference_1_0() { return cFuncFuncionesCrossReference_1_0; }
		
		//ID
		public RuleCall getFuncFuncionesIDTerminalRuleCall_1_0_1() { return cFuncFuncionesIDTerminalRuleCall_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//("EY" args+=Expresion)*
		public Group getGroup_3() { return cGroup_3; }
		
		//"EY"
		public Keyword getEYKeyword_3_0() { return cEYKeyword_3_0; }
		
		//args+=Expresion
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expresion
		public RuleCall getArgsExpresionParserRuleCall_3_1_0() { return cArgsExpresionParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpresionDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionDecimal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpresionAritmeticaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpresionSimpleAritmeticaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpresionSimpleXokasParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpresionLongitudStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpresionNegativoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ExpresionDecimal:
		//    ExpresionAritmetica | ExpresionSimpleAritmetica | ExpresionSimpleXokas | ExpresionLongitudString | ExpresionNegativo
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpresionAritmetica | ExpresionSimpleAritmetica | ExpresionSimpleXokas | ExpresionLongitudString | ExpresionNegativo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpresionAritmetica
		public RuleCall getExpresionAritmeticaParserRuleCall_0() { return cExpresionAritmeticaParserRuleCall_0; }
		
		//ExpresionSimpleAritmetica
		public RuleCall getExpresionSimpleAritmeticaParserRuleCall_1() { return cExpresionSimpleAritmeticaParserRuleCall_1; }
		
		//ExpresionSimpleXokas
		public RuleCall getExpresionSimpleXokasParserRuleCall_2() { return cExpresionSimpleXokasParserRuleCall_2; }
		
		//ExpresionLongitudString
		public RuleCall getExpresionLongitudStringParserRuleCall_3() { return cExpresionLongitudStringParserRuleCall_3; }
		
		//ExpresionNegativo
		public RuleCall getExpresionNegativoParserRuleCall_4() { return cExpresionNegativoParserRuleCall_4; }
	}
	public class ExpresionNegativoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionNegativo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExpresionParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//ExpresionNegativo:
		//    '-' e = Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' e = Expresion
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//e = Expresion
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_1_0() { return cEExpresionParserRuleCall_1_0; }
	}
	public class ExpresionSimpleXokasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionSimpleXokas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXINTTerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cZAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cZINTTerminalRuleCall_3_2_0 = (RuleCall)cZAssignment_3_2.eContents().get(0);
		
		//ExpresionSimpleXokas:
		//    x = INT '.' y=INT (('e'|'E') '-'? z=INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x = INT '.' y=INT (('e'|'E') '-'? z=INT)?
		public Group getGroup() { return cGroup; }
		
		//x = INT
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_0_0() { return cXINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//y=INT
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_2_0() { return cYINTTerminalRuleCall_2_0; }
		
		//(('e'|'E') '-'? z=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('e'|'E')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'e'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }
		
		//'E'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_3_1() { return cHyphenMinusKeyword_3_1; }
		
		//z=INT
		public Assignment getZAssignment_3_2() { return cZAssignment_3_2; }
		
		//INT
		public RuleCall getZINTTerminalRuleCall_3_2_0() { return cZINTTerminalRuleCall_3_2_0; }
	}
	public class ExpresionSimpleAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionSimpleAritmetica");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//ExpresionSimpleAritmetica:
		//    x=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x=INT
		public Assignment getXAssignment() { return cXAssignment; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_0() { return cXINTTerminalRuleCall_0; }
	}
	public class ExpresionLongitudStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionLongitudString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKGRANDEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLlamadoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLlamadoExpresionParserRuleCall_1_0 = (RuleCall)cLlamadoAssignment_1.eContents().get(0);
		
		//ExpresionLongitudString:
		//    "KGRANDE" llamado = Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"KGRANDE" llamado = Expresion
		public Group getGroup() { return cGroup; }
		
		//"KGRANDE"
		public Keyword getKGRANDEKeyword_0() { return cKGRANDEKeyword_0; }
		
		//llamado = Expresion
		public Assignment getLlamadoAssignment_1() { return cLlamadoAssignment_1; }
		
		//Expresion
		public RuleCall getLlamadoExpresionParserRuleCall_1_0() { return cLlamadoExpresionParserRuleCall_1_0; }
	}
	public class ExpresionAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionAritmetica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSumaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRestaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicacionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDivisionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cModuloParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ExpresionAritmetica:
		//     (Suma | Resta | Multiplicacion | Division | Modulo)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Suma | Resta | Multiplicacion | Division | Modulo)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Suma
		public RuleCall getSumaParserRuleCall_0() { return cSumaParserRuleCall_0; }
		
		//Resta
		public RuleCall getRestaParserRuleCall_1() { return cRestaParserRuleCall_1; }
		
		//Multiplicacion
		public RuleCall getMultiplicacionParserRuleCall_2() { return cMultiplicacionParserRuleCall_2; }
		
		//Division
		public RuleCall getDivisionParserRuleCall_3() { return cDivisionParserRuleCall_3; }
		
		//Modulo
		public RuleCall getModuloParserRuleCall_4() { return cModuloParserRuleCall_4; }
	}
	public class SumaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Suma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSUMAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperacionParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//Suma:
		//    "SUMA" op=Operacion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"SUMA" op=Operacion
		public Group getGroup() { return cGroup; }
		
		//"SUMA"
		public Keyword getSUMAKeyword_0() { return cSUMAKeyword_0; }
		
		//op=Operacion
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operacion
		public RuleCall getOpOperacionParserRuleCall_1_0() { return cOpOperacionParserRuleCall_1_0; }
	}
	public class RestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Resta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRESTAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperacionParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//Resta:
		//    "RESTA" op=Operacion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"RESTA" op=Operacion
		public Group getGroup() { return cGroup; }
		
		//"RESTA"
		public Keyword getRESTAKeyword_0() { return cRESTAKeyword_0; }
		
		//op=Operacion
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operacion
		public RuleCall getOpOperacionParserRuleCall_1_0() { return cOpOperacionParserRuleCall_1_0; }
	}
	public class MultiplicacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Multiplicacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMULTIPLICACIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperacionParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//Multiplicacion:
		//    "MULTIPLICACION" op=Operacion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"MULTIPLICACION" op=Operacion
		public Group getGroup() { return cGroup; }
		
		//"MULTIPLICACION"
		public Keyword getMULTIPLICACIONKeyword_0() { return cMULTIPLICACIONKeyword_0; }
		
		//op=Operacion
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operacion
		public RuleCall getOpOperacionParserRuleCall_1_0() { return cOpOperacionParserRuleCall_1_0; }
	}
	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDIVISIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperacionParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//Division:
		//    "DIVISION" op=Operacion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"DIVISION" op=Operacion
		public Group getGroup() { return cGroup; }
		
		//"DIVISION"
		public Keyword getDIVISIONKeyword_0() { return cDIVISIONKeyword_0; }
		
		//op=Operacion
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operacion
		public RuleCall getOpOperacionParserRuleCall_1_0() { return cOpOperacionParserRuleCall_1_0; }
	}
	public class ModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Modulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMODULOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperacionParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//Modulo:
		//    "MODULO" op=Operacion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"MODULO" op=Operacion
		public Group getGroup() { return cGroup; }
		
		//"MODULO"
		public Keyword getMODULOKeyword_0() { return cMODULOKeyword_0; }
		
		//op=Operacion
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operacion
		public RuleCall getOpOperacionParserRuleCall_1_0() { return cOpOperacionParserRuleCall_1_0; }
	}
	public class OperacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.Operacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJULIOPROFEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIzqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIzqExpresionParserRuleCall_1_0 = (RuleCall)cIzqAssignment_1.eContents().get(0);
		private final Keyword cYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDerExpresionParserRuleCall_3_0 = (RuleCall)cDerAssignment_3.eContents().get(0);
		
		//Operacion:
		//    "JULIOPROFE" izq=Expresion "Y" der=Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"JULIOPROFE" izq=Expresion "Y" der=Expresion
		public Group getGroup() { return cGroup; }
		
		//"JULIOPROFE"
		public Keyword getJULIOPROFEKeyword_0() { return cJULIOPROFEKeyword_0; }
		
		//izq=Expresion
		public Assignment getIzqAssignment_1() { return cIzqAssignment_1; }
		
		//Expresion
		public RuleCall getIzqExpresionParserRuleCall_1_0() { return cIzqExpresionParserRuleCall_1_0; }
		
		//"Y"
		public Keyword getYKeyword_2() { return cYKeyword_2; }
		
		//der=Expresion
		public Assignment getDerAssignment_3() { return cDerAssignment_3; }
		
		//Expresion
		public RuleCall getDerExpresionParserRuleCall_3_0() { return cDerExpresionParserRuleCall_3_0; }
	}
	public class ExpresionStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpresionConcatenacionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpresionSimpleStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpresionString:
		//    ExpresionConcatenacion | ExpresionSimpleString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpresionConcatenacion | ExpresionSimpleString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpresionConcatenacion
		public RuleCall getExpresionConcatenacionParserRuleCall_0() { return cExpresionConcatenacionParserRuleCall_0; }
		
		//ExpresionSimpleString
		public RuleCall getExpresionSimpleStringParserRuleCall_1() { return cExpresionSimpleStringParserRuleCall_1; }
	}
	public class ExpresionSimpleStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionSimpleString");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXSTRINGTerminalRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//ExpresionSimpleString:
		//     x=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x=STRING
		public Assignment getXAssignment() { return cXAssignment; }
		
		//STRING
		public RuleCall getXSTRINGTerminalRuleCall_0() { return cXSTRINGTerminalRuleCall_0; }
	}
	public class ExpresionConcatenacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionConcatenacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPrimeroAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimeroExpresionParserRuleCall_1_0 = (RuleCall)cPrimeroAssignment_1.eContents().get(0);
		private final Keyword cGOTITAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSegundoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSegundoExpresionParserRuleCall_3_0 = (RuleCall)cSegundoAssignment_3.eContents().get(0);
		
		//ExpresionConcatenacion:
		//    "LA" primero=Expresion "GOTITA" segundo=Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"LA" primero=Expresion "GOTITA" segundo=Expresion
		public Group getGroup() { return cGroup; }
		
		//"LA"
		public Keyword getLAKeyword_0() { return cLAKeyword_0; }
		
		//primero=Expresion
		public Assignment getPrimeroAssignment_1() { return cPrimeroAssignment_1; }
		
		//Expresion
		public RuleCall getPrimeroExpresionParserRuleCall_1_0() { return cPrimeroExpresionParserRuleCall_1_0; }
		
		//"GOTITA"
		public Keyword getGOTITAKeyword_2() { return cGOTITAKeyword_2; }
		
		//segundo=Expresion
		public Assignment getSegundoAssignment_3() { return cSegundoAssignment_3; }
		
		//Expresion
		public RuleCall getSegundoExpresionParserRuleCall_3_0() { return cSegundoExpresionParserRuleCall_3_0; }
	}
	public class ExpresionBooleanaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionBooleana");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpresionOperacionesBooleanasParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpresionBooleanaSimpleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpresionBooleana:
		//    ExpresionOperacionesBooleanas | ExpresionBooleanaSimple
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpresionOperacionesBooleanas | ExpresionBooleanaSimple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpresionOperacionesBooleanas
		public RuleCall getExpresionOperacionesBooleanasParserRuleCall_0() { return cExpresionOperacionesBooleanasParserRuleCall_0; }
		
		//ExpresionBooleanaSimple
		public RuleCall getExpresionBooleanaSimpleParserRuleCall_1() { return cExpresionBooleanaSimpleParserRuleCall_1; }
	}
	public class ExpresionOperacionesBooleanasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionOperacionesBooleanas");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperacionesBooleanasDeComparacionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperacionesBooleanasDeComparacionAritmeticaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperadoresLogicosBooleanosParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOpNEGParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpresionStringVacioParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ExpresionOperacionesBooleanas:
		//    OperacionesBooleanasDeComparacion |  OperacionesBooleanasDeComparacionAritmetica | OperadoresLogicosBooleanos | OpNEG | ExpresionStringVacio
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OperacionesBooleanasDeComparacion |  OperacionesBooleanasDeComparacionAritmetica | OperadoresLogicosBooleanos | OpNEG | ExpresionStringVacio
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperacionesBooleanasDeComparacion
		public RuleCall getOperacionesBooleanasDeComparacionParserRuleCall_0() { return cOperacionesBooleanasDeComparacionParserRuleCall_0; }
		
		//OperacionesBooleanasDeComparacionAritmetica
		public RuleCall getOperacionesBooleanasDeComparacionAritmeticaParserRuleCall_1() { return cOperacionesBooleanasDeComparacionAritmeticaParserRuleCall_1; }
		
		//OperadoresLogicosBooleanos
		public RuleCall getOperadoresLogicosBooleanosParserRuleCall_2() { return cOperadoresLogicosBooleanosParserRuleCall_2; }
		
		//OpNEG
		public RuleCall getOpNEGParserRuleCall_3() { return cOpNEGParserRuleCall_3; }
		
		//ExpresionStringVacio
		public RuleCall getExpresionStringVacioParserRuleCall_4() { return cExpresionStringVacioParserRuleCall_4; }
	}
	public class OperacionesBooleanasDeComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.OperacionesBooleanasDeComparacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cXAlternatives_0_0 = (Alternatives)cXAssignment_0.eContents().get(0);
		private final Keyword cXPOXIKeyword_0_0_0 = (Keyword)cXAlternatives_0_0.eContents().get(0);
		private final Keyword cXAGUAKeyword_0_0_1 = (Keyword)cXAlternatives_0_0.eContents().get(1);
		private final Assignment cIzqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIzqExpresionParserRuleCall_1_0 = (RuleCall)cIzqAssignment_1.eContents().get(0);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cYAlternatives_2_0 = (Alternatives)cYAssignment_2.eContents().get(0);
		private final Keyword cYPOLKeyword_2_0_0 = (Keyword)cYAlternatives_2_0.eContents().get(0);
		private final Keyword cYRRASKeyword_2_0_1 = (Keyword)cYAlternatives_2_0.eContents().get(1);
		private final Assignment cDerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDerExpresionParserRuleCall_3_0 = (RuleCall)cDerAssignment_3.eContents().get(0);
		
		//OperacionesBooleanasDeComparacion:
		//    x=("POXI" | "AGUA") izq = Expresion y=("POL" | "RRAS") der = Expresion
		//    //PEPE PANDA -> AND
		//    //NAR ANJA -> OR
		//    //XO R -> XOR
		//    //POXI POL -> EQ
		//    // AGUA RRAS -> NEQ
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x=("POXI" | "AGUA") izq = Expresion y=("POL" | "RRAS") der = Expresion
		public Group getGroup() { return cGroup; }
		
		//x=("POXI" | "AGUA")
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//("POXI" | "AGUA")
		public Alternatives getXAlternatives_0_0() { return cXAlternatives_0_0; }
		
		//"POXI"
		public Keyword getXPOXIKeyword_0_0_0() { return cXPOXIKeyword_0_0_0; }
		
		//"AGUA"
		public Keyword getXAGUAKeyword_0_0_1() { return cXAGUAKeyword_0_0_1; }
		
		//izq = Expresion
		public Assignment getIzqAssignment_1() { return cIzqAssignment_1; }
		
		//Expresion
		public RuleCall getIzqExpresionParserRuleCall_1_0() { return cIzqExpresionParserRuleCall_1_0; }
		
		//y=("POL" | "RRAS")
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//("POL" | "RRAS")
		public Alternatives getYAlternatives_2_0() { return cYAlternatives_2_0; }
		
		//"POL"
		public Keyword getYPOLKeyword_2_0_0() { return cYPOLKeyword_2_0_0; }
		
		//"RRAS"
		public Keyword getYRRASKeyword_2_0_1() { return cYRRASKeyword_2_0_1; }
		
		//der = Expresion
		public Assignment getDerAssignment_3() { return cDerAssignment_3; }
		
		//Expresion
		public RuleCall getDerExpresionParserRuleCall_3_0() { return cDerExpresionParserRuleCall_3_0; }
	}
	public class ExpresionStringVacioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionStringVacio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMIBILLETERAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLlamadoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLlamadoExpresionParserRuleCall_1_0 = (RuleCall)cLlamadoAssignment_1.eContents().get(0);
		
		//// true && false
		//// if(3 != 4)
		//ExpresionStringVacio:
		//    "MIBILLETERA" llamado = Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"MIBILLETERA" llamado = Expresion
		public Group getGroup() { return cGroup; }
		
		//"MIBILLETERA"
		public Keyword getMIBILLETERAKeyword_0() { return cMIBILLETERAKeyword_0; }
		
		//llamado = Expresion
		public Assignment getLlamadoAssignment_1() { return cLlamadoAssignment_1; }
		
		//Expresion
		public RuleCall getLlamadoExpresionParserRuleCall_1_0() { return cLlamadoExpresionParserRuleCall_1_0; }
	}
	public class OperadoresLogicosBooleanosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.OperadoresLogicosBooleanos");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cXAlternatives_0_0 = (Alternatives)cXAssignment_0.eContents().get(0);
		private final Keyword cXPEPEKeyword_0_0_0 = (Keyword)cXAlternatives_0_0.eContents().get(0);
		private final Keyword cXNARKeyword_0_0_1 = (Keyword)cXAlternatives_0_0.eContents().get(1);
		private final Keyword cXXOKeyword_0_0_2 = (Keyword)cXAlternatives_0_0.eContents().get(2);
		private final Assignment cIzqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIzqExpresionParserRuleCall_1_0 = (RuleCall)cIzqAssignment_1.eContents().get(0);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cYAlternatives_2_0 = (Alternatives)cYAssignment_2.eContents().get(0);
		private final Keyword cYPANDAKeyword_2_0_0 = (Keyword)cYAlternatives_2_0.eContents().get(0);
		private final Keyword cYANJAKeyword_2_0_1 = (Keyword)cYAlternatives_2_0.eContents().get(1);
		private final Keyword cYRKeyword_2_0_2 = (Keyword)cYAlternatives_2_0.eContents().get(2);
		private final Assignment cDerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDerExpresionParserRuleCall_3_0 = (RuleCall)cDerAssignment_3.eContents().get(0);
		
		//OperadoresLogicosBooleanos:
		//    x=("PEPE" | "NAR" | "XO") izq = Expresion y=("PANDA" | "ANJA" | "R") der = Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x=("PEPE" | "NAR" | "XO") izq = Expresion y=("PANDA" | "ANJA" | "R") der = Expresion
		public Group getGroup() { return cGroup; }
		
		//x=("PEPE" | "NAR" | "XO")
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//("PEPE" | "NAR" | "XO")
		public Alternatives getXAlternatives_0_0() { return cXAlternatives_0_0; }
		
		//"PEPE"
		public Keyword getXPEPEKeyword_0_0_0() { return cXPEPEKeyword_0_0_0; }
		
		//"NAR"
		public Keyword getXNARKeyword_0_0_1() { return cXNARKeyword_0_0_1; }
		
		//"XO"
		public Keyword getXXOKeyword_0_0_2() { return cXXOKeyword_0_0_2; }
		
		//izq = Expresion
		public Assignment getIzqAssignment_1() { return cIzqAssignment_1; }
		
		//Expresion
		public RuleCall getIzqExpresionParserRuleCall_1_0() { return cIzqExpresionParserRuleCall_1_0; }
		
		//y=("PANDA" | "ANJA" | "R")
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//("PANDA" | "ANJA" | "R")
		public Alternatives getYAlternatives_2_0() { return cYAlternatives_2_0; }
		
		//"PANDA"
		public Keyword getYPANDAKeyword_2_0_0() { return cYPANDAKeyword_2_0_0; }
		
		//"ANJA"
		public Keyword getYANJAKeyword_2_0_1() { return cYANJAKeyword_2_0_1; }
		
		//"R"
		public Keyword getYRKeyword_2_0_2() { return cYRKeyword_2_0_2; }
		
		//der = Expresion
		public Assignment getDerAssignment_3() { return cDerAssignment_3; }
		
		//Expresion
		public RuleCall getDerExpresionParserRuleCall_3_0() { return cDerExpresionParserRuleCall_3_0; }
	}
	public class OperacionesBooleanasDeComparacionAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.OperacionesBooleanasDeComparacionAritmetica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cXAlternatives_0_0 = (Alternatives)cXAssignment_0.eContents().get(0);
		private final Keyword cXLEGALKeyword_0_0_0 = (Keyword)cXAlternatives_0_0.eContents().get(0);
		private final Keyword cXILEGALKeyword_0_0_1 = (Keyword)cXAlternatives_0_0.eContents().get(1);
		private final Keyword cXALEGALKeyword_0_0_2 = (Keyword)cXAlternatives_0_0.eContents().get(2);
		private final Keyword cXANTILEGALKeyword_0_0_3 = (Keyword)cXAlternatives_0_0.eContents().get(3);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOpCompParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//OperacionesBooleanasDeComparacionAritmetica:
		//    x=("LEGAL" | "ILEGAL" | "ALEGAL" | "ANTILEGAL") (op=OpComp)
		//    //LEGAL -> >
		//    //ILEGAL -> <
		//    //ALEGAL -> >=
		//    //ANTILEGAL -> <=
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x=("LEGAL" | "ILEGAL" | "ALEGAL" | "ANTILEGAL") (op=OpComp)
		public Group getGroup() { return cGroup; }
		
		//x=("LEGAL" | "ILEGAL" | "ALEGAL" | "ANTILEGAL")
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//("LEGAL" | "ILEGAL" | "ALEGAL" | "ANTILEGAL")
		public Alternatives getXAlternatives_0_0() { return cXAlternatives_0_0; }
		
		//"LEGAL"
		public Keyword getXLEGALKeyword_0_0_0() { return cXLEGALKeyword_0_0_0; }
		
		//"ILEGAL"
		public Keyword getXILEGALKeyword_0_0_1() { return cXILEGALKeyword_0_0_1; }
		
		//"ALEGAL"
		public Keyword getXALEGALKeyword_0_0_2() { return cXALEGALKeyword_0_0_2; }
		
		//"ANTILEGAL"
		public Keyword getXANTILEGALKeyword_0_0_3() { return cXANTILEGALKeyword_0_0_3; }
		
		//(op=OpComp)
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//OpComp
		public RuleCall getOpOpCompParserRuleCall_1_0() { return cOpOpCompParserRuleCall_1_0; }
	}
	public class OpNEGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.OpNEG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cALVERRESKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpresionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//OpNEG:
		//    "ALVERRES" expr=Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"ALVERRES" expr=Expresion
		public Group getGroup() { return cGroup; }
		
		//"ALVERRES"
		public Keyword getALVERRESKeyword_0() { return cALVERRESKeyword_0; }
		
		//expr=Expresion
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expresion
		public RuleCall getExprExpresionParserRuleCall_1_0() { return cExprExpresionParserRuleCall_1_0; }
	}
	public class OpCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.OpComp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIzqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIzqExpresionParserRuleCall_0_0 = (RuleCall)cIzqAssignment_0.eContents().get(0);
		private final Keyword cCONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDerExpresionParserRuleCall_2_0 = (RuleCall)cDerAssignment_2.eContents().get(0);
		
		//OpComp:
		//    izq = Expresion "CON" der = Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//izq = Expresion "CON" der = Expresion
		public Group getGroup() { return cGroup; }
		
		//izq = Expresion
		public Assignment getIzqAssignment_0() { return cIzqAssignment_0; }
		
		//Expresion
		public RuleCall getIzqExpresionParserRuleCall_0_0() { return cIzqExpresionParserRuleCall_0_0; }
		
		//"CON"
		public Keyword getCONKeyword_1() { return cCONKeyword_1; }
		
		//der = Expresion
		public Assignment getDerAssignment_2() { return cDerAssignment_2; }
		
		//Expresion
		public RuleCall getDerExpresionParserRuleCall_2_0() { return cDerExpresionParserRuleCall_2_0; }
	}
	public class ExpresionBooleanaSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Pole.ExpresionBooleanaSimple");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cXAlternatives_0 = (Alternatives)cXAssignment.eContents().get(0);
		private final Keyword cXYINKeyword_0_0 = (Keyword)cXAlternatives_0.eContents().get(0);
		private final Keyword cXYANGKeyword_0_1 = (Keyword)cXAlternatives_0.eContents().get(1);
		
		//ExpresionBooleanaSimple:
		//    x = ("YIN" | "YANG")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x = ("YIN" | "YANG")
		public Assignment getXAssignment() { return cXAssignment; }
		
		//("YIN" | "YANG")
		public Alternatives getXAlternatives_0() { return cXAlternatives_0; }
		
		//"YIN"
		public Keyword getXYINKeyword_0_0() { return cXYINKeyword_0_0; }
		
		//"YANG"
		public Keyword getXYANGKeyword_0_1() { return cXYANGKeyword_0_1; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final EjecucionElements pEjecucion;
	private final InstruccionElements pInstruccion;
	private final LlamadoMetodoElements pLlamadoMetodo;
	private final FuncionesElements pFunciones;
	private final ImprimirElements pImprimir;
	private final ImprimirSinSaltoDeLineaElements pImprimirSinSaltoDeLinea;
	private final CondicionalElements pCondicional;
	private final CondicionalElseIfElements pCondicionalElseIf;
	private final SwitchElements pSwitch;
	private final CaseSwitchElements pCaseSwitch;
	private final ForElements pFor;
	private final WhileElements pWhile;
	private final DoWhileElements pDoWhile;
	private final DeclVariablesElements pDeclVariables;
	private final DeclVariables2Elements pDeclVariables2;
	private final AsignacionVariableElements pAsignacionVariable;
	private final TipoDeDatoElements pTipoDeDato;
	private final ExpresionElements pExpresion;
	private final LlamadoVariableElements pLlamadoVariable;
	private final LlamadoFuncionElements pLlamadoFuncion;
	private final ExpresionDecimalElements pExpresionDecimal;
	private final ExpresionNegativoElements pExpresionNegativo;
	private final ExpresionSimpleXokasElements pExpresionSimpleXokas;
	private final ExpresionSimpleAritmeticaElements pExpresionSimpleAritmetica;
	private final ExpresionLongitudStringElements pExpresionLongitudString;
	private final ExpresionAritmeticaElements pExpresionAritmetica;
	private final SumaElements pSuma;
	private final RestaElements pResta;
	private final MultiplicacionElements pMultiplicacion;
	private final DivisionElements pDivision;
	private final ModuloElements pModulo;
	private final OperacionElements pOperacion;
	private final ExpresionStringElements pExpresionString;
	private final ExpresionSimpleStringElements pExpresionSimpleString;
	private final ExpresionConcatenacionElements pExpresionConcatenacion;
	private final ExpresionBooleanaElements pExpresionBooleana;
	private final ExpresionOperacionesBooleanasElements pExpresionOperacionesBooleanas;
	private final OperacionesBooleanasDeComparacionElements pOperacionesBooleanasDeComparacion;
	private final ExpresionStringVacioElements pExpresionStringVacio;
	private final OperadoresLogicosBooleanosElements pOperadoresLogicosBooleanos;
	private final OperacionesBooleanasDeComparacionAritmeticaElements pOperacionesBooleanasDeComparacionAritmetica;
	private final OpNEGElements pOpNEG;
	private final OpCompElements pOpComp;
	private final ExpresionBooleanaSimpleElements pExpresionBooleanaSimple;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PoleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pEjecucion = new EjecucionElements();
		this.pInstruccion = new InstruccionElements();
		this.pLlamadoMetodo = new LlamadoMetodoElements();
		this.pFunciones = new FuncionesElements();
		this.pImprimir = new ImprimirElements();
		this.pImprimirSinSaltoDeLinea = new ImprimirSinSaltoDeLineaElements();
		this.pCondicional = new CondicionalElements();
		this.pCondicionalElseIf = new CondicionalElseIfElements();
		this.pSwitch = new SwitchElements();
		this.pCaseSwitch = new CaseSwitchElements();
		this.pFor = new ForElements();
		this.pWhile = new WhileElements();
		this.pDoWhile = new DoWhileElements();
		this.pDeclVariables = new DeclVariablesElements();
		this.pDeclVariables2 = new DeclVariables2Elements();
		this.pAsignacionVariable = new AsignacionVariableElements();
		this.pTipoDeDato = new TipoDeDatoElements();
		this.pExpresion = new ExpresionElements();
		this.pLlamadoVariable = new LlamadoVariableElements();
		this.pLlamadoFuncion = new LlamadoFuncionElements();
		this.pExpresionDecimal = new ExpresionDecimalElements();
		this.pExpresionNegativo = new ExpresionNegativoElements();
		this.pExpresionSimpleXokas = new ExpresionSimpleXokasElements();
		this.pExpresionSimpleAritmetica = new ExpresionSimpleAritmeticaElements();
		this.pExpresionLongitudString = new ExpresionLongitudStringElements();
		this.pExpresionAritmetica = new ExpresionAritmeticaElements();
		this.pSuma = new SumaElements();
		this.pResta = new RestaElements();
		this.pMultiplicacion = new MultiplicacionElements();
		this.pDivision = new DivisionElements();
		this.pModulo = new ModuloElements();
		this.pOperacion = new OperacionElements();
		this.pExpresionString = new ExpresionStringElements();
		this.pExpresionSimpleString = new ExpresionSimpleStringElements();
		this.pExpresionConcatenacion = new ExpresionConcatenacionElements();
		this.pExpresionBooleana = new ExpresionBooleanaElements();
		this.pExpresionOperacionesBooleanas = new ExpresionOperacionesBooleanasElements();
		this.pOperacionesBooleanasDeComparacion = new OperacionesBooleanasDeComparacionElements();
		this.pExpresionStringVacio = new ExpresionStringVacioElements();
		this.pOperadoresLogicosBooleanos = new OperadoresLogicosBooleanosElements();
		this.pOperacionesBooleanasDeComparacionAritmetica = new OperacionesBooleanasDeComparacionAritmeticaElements();
		this.pOpNEG = new OpNEGElements();
		this.pOpComp = new OpCompElements();
		this.pExpresionBooleanaSimple = new ExpresionBooleanaSimpleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.Pole".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programa:
	//    name = ID "PO"
	//    ej=(Ejecucion)
	//    "LE"
	//;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//Ejecucion:
	//    instr+=Instruccion+
	//;
	public EjecucionElements getEjecucionAccess() {
		return pEjecucion;
	}
	
	public ParserRule getEjecucionRule() {
		return getEjecucionAccess().getRule();
	}
	
	//Instruccion:
	//    DeclVariables | Imprimir | Condicional | Switch | For | While | DoWhile | Funciones | AsignacionVariable | LlamadoMetodo | ImprimirSinSaltoDeLinea
	//;
	public InstruccionElements getInstruccionAccess() {
		return pInstruccion;
	}
	
	public ParserRule getInstruccionRule() {
		return getInstruccionAccess().getRule();
	}
	
	//LlamadoMetodo:
	//    "EYYOLVIDONA" method=[Funciones] "("("EY" args+=Expresion)*")"
	//;
	public LlamadoMetodoElements getLlamadoMetodoAccess() {
		return pLlamadoMetodo;
	}
	
	public ParserRule getLlamadoMetodoRule() {
		return getLlamadoMetodoAccess().getRule();
	}
	
	////PEREMENNAYA MRBEAST hola -> EYYOLVIDONA hola2()
	////EYYOLVIDONA metodoVOID(EY 5, EY "Hola")
	//Funciones:
	//    "OIGO" tipoDeDato=TipoDeDato name=ID ("MUY" param+=DeclVariables2)*
	//        (instr+=Instruccion)*
	//        ("PEROMUY" e=Expresion)?
	//    "BORROSO"
	//;
	public FuncionesElements getFuncionesAccess() {
		return pFunciones;
	}
	
	public ParserRule getFuncionesRule() {
		return getFuncionesAccess().getRule();
	}
	
	//Imprimir:
	//    "PARATICONDESPRECIO" (e=Expresion) ("@" e1+=Expresion)*
	//;
	public ImprimirElements getImprimirAccess() {
		return pImprimir;
	}
	
	public ParserRule getImprimirRule() {
		return getImprimirAccess().getRule();
	}
	
	//ImprimirSinSaltoDeLinea:
	//    "PARATI" (e=Expresion) ("@" e1+=Expresion)*
	//;
	public ImprimirSinSaltoDeLineaElements getImprimirSinSaltoDeLineaAccess() {
		return pImprimirSinSaltoDeLinea;
	}
	
	public ParserRule getImprimirSinSaltoDeLineaRule() {
		return getImprimirSinSaltoDeLineaAccess().getRule();
	}
	
	//Condicional:
	//      "GG?" expr=Expresion
	//          "WITHTEAM"
	//              instr+=Instruccion*
	//          (casiTeam+=CondicionalElseIf)*
	//         ("NOTEAM"
	//             instrElse+=Instruccion*)?
	//      "EZ"
	//;
	public CondicionalElements getCondicionalAccess() {
		return pCondicional;
	}
	
	public ParserRule getCondicionalRule() {
		return getCondicionalAccess().getRule();
	}
	
	//CondicionalElseIf:
	//    "CASITEAM" exprELIF=Expresion
	//        (instrELIF += Instruccion)*
	//;
	public CondicionalElseIfElements getCondicionalElseIfAccess() {
		return pCondicionalElseIf;
	}
	
	public ParserRule getCondicionalElseIfRule() {
		return getCondicionalElseIfAccess().getRule();
	}
	
	//Switch:
	//    var=LlamadoVariable "RULETARUSA?"
	//         (case += CaseSwitch)+
	//    "BOOM"
	//;
	public SwitchElements getSwitchAccess() {
		return pSwitch;
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}
	
	//CaseSwitch:
	//    "BALA" (e=Expresion) instr+=Instruccion*
	//;
	public CaseSwitchElements getCaseSwitchAccess() {
		return pCaseSwitch;
	}
	
	public ParserRule getCaseSwitchRule() {
		return getCaseSwitchAccess().getRule();
	}
	
	//For:
	//    // x++
	//    // x -> x+1
	//    "CHOCO" name=ID (var = DeclVariables) "YVOLO" (expr=ExpresionBooleana) "YYOVOLE" asig=AsignacionVariable
	//        (instr+=Instruccion)*
	//    "YSEFUE"
	//    // Problema con variable, como hacer que la variable declarada aqui, pase a ser una declaracion de variable como tal
	//;
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//While:
	//    "SA" name=ID "MATAO" expr=Expresion
	//        (instr+=Instruccion)*
	//    "PACO"
	//;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//DoWhile:
	//    "AHITEVAMI" name=ID
	//        (instr+=Instruccion)*
	//    "DOLOR" expr=Expresion
	//;
	public DoWhileElements getDoWhileAccess() {
		return pDoWhile;
	}
	
	public ParserRule getDoWhileRule() {
		return getDoWhileAccess().getRule();
	}
	
	//DeclVariables:
	//    "PEREMENNAYA" tipoDeDato=TipoDeDato name=ID "->" valor=Expresion //Delimitar expresion con el Validator?
	//;
	public DeclVariablesElements getDeclVariablesAccess() {
		return pDeclVariables;
	}
	
	public ParserRule getDeclVariablesRule() {
		return getDeclVariablesAccess().getRule();
	}
	
	//DeclVariables2 returns DeclVariables:
	//    tipoDeDato=TipoDeDato name=ID
	//;
	public DeclVariables2Elements getDeclVariables2Access() {
		return pDeclVariables2;
	}
	
	public ParserRule getDeclVariables2Rule() {
		return getDeclVariables2Access().getRule();
	}
	
	//AsignacionVariable:
	//    variable = [DeclVariables] "->" valor=Expresion
	//;
	public AsignacionVariableElements getAsignacionVariableAccess() {
		return pAsignacionVariable;
	}
	
	public ParserRule getAsignacionVariableRule() {
		return getAsignacionVariableAccess().getRule();
	}
	
	//TipoDeDato:
	//    "DALAS" | "MRBEAST" | "XOKAS" | "YINYANG" | "MICORAZON" //DALAS = String, MRBEAST= Int, XOKAS = Double, YING = Boolean, MICORAZON = Void
	//;
	public TipoDeDatoElements getTipoDeDatoAccess() {
		return pTipoDeDato;
	}
	
	public ParserRule getTipoDeDatoRule() {
		return getTipoDeDatoAccess().getRule();
	}
	
	//Expresion:
	//    ExpresionDecimal | ExpresionString | ExpresionBooleana |  LlamadoVariable | LlamadoFuncion //Problema con la gramatica ambigua
	//;
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	//LlamadoVariable:
	//    variable=[DeclVariables]
	//;
	public LlamadoVariableElements getLlamadoVariableAccess() {
		return pLlamadoVariable;
	}
	
	public ParserRule getLlamadoVariableRule() {
		return getLlamadoVariableAccess().getRule();
	}
	
	//LlamadoFuncion:
	//    "EYYOLVIDONA" func=[Funciones] "("("EY" args+=Expresion)*")" //Validator, podemos verificar que si o si devuelve algo?
	//                                                            //Validator, numero de argumentos
	//                                                            //Esto lo hace ambigua a la gramatica :C
	//;
	public LlamadoFuncionElements getLlamadoFuncionAccess() {
		return pLlamadoFuncion;
	}
	
	public ParserRule getLlamadoFuncionRule() {
		return getLlamadoFuncionAccess().getRule();
	}
	
	//ExpresionDecimal:
	//    ExpresionAritmetica | ExpresionSimpleAritmetica | ExpresionSimpleXokas | ExpresionLongitudString | ExpresionNegativo
	//;
	public ExpresionDecimalElements getExpresionDecimalAccess() {
		return pExpresionDecimal;
	}
	
	public ParserRule getExpresionDecimalRule() {
		return getExpresionDecimalAccess().getRule();
	}
	
	//ExpresionNegativo:
	//    '-' e = Expresion
	//;
	public ExpresionNegativoElements getExpresionNegativoAccess() {
		return pExpresionNegativo;
	}
	
	public ParserRule getExpresionNegativoRule() {
		return getExpresionNegativoAccess().getRule();
	}
	
	//ExpresionSimpleXokas:
	//    x = INT '.' y=INT (('e'|'E') '-'? z=INT)?
	//;
	public ExpresionSimpleXokasElements getExpresionSimpleXokasAccess() {
		return pExpresionSimpleXokas;
	}
	
	public ParserRule getExpresionSimpleXokasRule() {
		return getExpresionSimpleXokasAccess().getRule();
	}
	
	//ExpresionSimpleAritmetica:
	//    x=INT
	//;
	public ExpresionSimpleAritmeticaElements getExpresionSimpleAritmeticaAccess() {
		return pExpresionSimpleAritmetica;
	}
	
	public ParserRule getExpresionSimpleAritmeticaRule() {
		return getExpresionSimpleAritmeticaAccess().getRule();
	}
	
	//ExpresionLongitudString:
	//    "KGRANDE" llamado = Expresion
	//;
	public ExpresionLongitudStringElements getExpresionLongitudStringAccess() {
		return pExpresionLongitudString;
	}
	
	public ParserRule getExpresionLongitudStringRule() {
		return getExpresionLongitudStringAccess().getRule();
	}
	
	//ExpresionAritmetica:
	//     (Suma | Resta | Multiplicacion | Division | Modulo)
	//;
	public ExpresionAritmeticaElements getExpresionAritmeticaAccess() {
		return pExpresionAritmetica;
	}
	
	public ParserRule getExpresionAritmeticaRule() {
		return getExpresionAritmeticaAccess().getRule();
	}
	
	//Suma:
	//    "SUMA" op=Operacion
	//;
	public SumaElements getSumaAccess() {
		return pSuma;
	}
	
	public ParserRule getSumaRule() {
		return getSumaAccess().getRule();
	}
	
	//Resta:
	//    "RESTA" op=Operacion
	//;
	public RestaElements getRestaAccess() {
		return pResta;
	}
	
	public ParserRule getRestaRule() {
		return getRestaAccess().getRule();
	}
	
	//Multiplicacion:
	//    "MULTIPLICACION" op=Operacion
	//;
	public MultiplicacionElements getMultiplicacionAccess() {
		return pMultiplicacion;
	}
	
	public ParserRule getMultiplicacionRule() {
		return getMultiplicacionAccess().getRule();
	}
	
	//Division:
	//    "DIVISION" op=Operacion
	//;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}
	
	//Modulo:
	//    "MODULO" op=Operacion
	//;
	public ModuloElements getModuloAccess() {
		return pModulo;
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}
	
	//Operacion:
	//    "JULIOPROFE" izq=Expresion "Y" der=Expresion
	//;
	public OperacionElements getOperacionAccess() {
		return pOperacion;
	}
	
	public ParserRule getOperacionRule() {
		return getOperacionAccess().getRule();
	}
	
	//ExpresionString:
	//    ExpresionConcatenacion | ExpresionSimpleString
	//;
	public ExpresionStringElements getExpresionStringAccess() {
		return pExpresionString;
	}
	
	public ParserRule getExpresionStringRule() {
		return getExpresionStringAccess().getRule();
	}
	
	//ExpresionSimpleString:
	//     x=STRING
	//;
	public ExpresionSimpleStringElements getExpresionSimpleStringAccess() {
		return pExpresionSimpleString;
	}
	
	public ParserRule getExpresionSimpleStringRule() {
		return getExpresionSimpleStringAccess().getRule();
	}
	
	//ExpresionConcatenacion:
	//    "LA" primero=Expresion "GOTITA" segundo=Expresion
	//;
	public ExpresionConcatenacionElements getExpresionConcatenacionAccess() {
		return pExpresionConcatenacion;
	}
	
	public ParserRule getExpresionConcatenacionRule() {
		return getExpresionConcatenacionAccess().getRule();
	}
	
	//ExpresionBooleana:
	//    ExpresionOperacionesBooleanas | ExpresionBooleanaSimple
	//;
	public ExpresionBooleanaElements getExpresionBooleanaAccess() {
		return pExpresionBooleana;
	}
	
	public ParserRule getExpresionBooleanaRule() {
		return getExpresionBooleanaAccess().getRule();
	}
	
	//ExpresionOperacionesBooleanas:
	//    OperacionesBooleanasDeComparacion |  OperacionesBooleanasDeComparacionAritmetica | OperadoresLogicosBooleanos | OpNEG | ExpresionStringVacio
	//;
	public ExpresionOperacionesBooleanasElements getExpresionOperacionesBooleanasAccess() {
		return pExpresionOperacionesBooleanas;
	}
	
	public ParserRule getExpresionOperacionesBooleanasRule() {
		return getExpresionOperacionesBooleanasAccess().getRule();
	}
	
	//OperacionesBooleanasDeComparacion:
	//    x=("POXI" | "AGUA") izq = Expresion y=("POL" | "RRAS") der = Expresion
	//    //PEPE PANDA -> AND
	//    //NAR ANJA -> OR
	//    //XO R -> XOR
	//    //POXI POL -> EQ
	//    // AGUA RRAS -> NEQ
	//;
	public OperacionesBooleanasDeComparacionElements getOperacionesBooleanasDeComparacionAccess() {
		return pOperacionesBooleanasDeComparacion;
	}
	
	public ParserRule getOperacionesBooleanasDeComparacionRule() {
		return getOperacionesBooleanasDeComparacionAccess().getRule();
	}
	
	//// true && false
	//// if(3 != 4)
	//ExpresionStringVacio:
	//    "MIBILLETERA" llamado = Expresion
	//;
	public ExpresionStringVacioElements getExpresionStringVacioAccess() {
		return pExpresionStringVacio;
	}
	
	public ParserRule getExpresionStringVacioRule() {
		return getExpresionStringVacioAccess().getRule();
	}
	
	//OperadoresLogicosBooleanos:
	//    x=("PEPE" | "NAR" | "XO") izq = Expresion y=("PANDA" | "ANJA" | "R") der = Expresion
	//;
	public OperadoresLogicosBooleanosElements getOperadoresLogicosBooleanosAccess() {
		return pOperadoresLogicosBooleanos;
	}
	
	public ParserRule getOperadoresLogicosBooleanosRule() {
		return getOperadoresLogicosBooleanosAccess().getRule();
	}
	
	//OperacionesBooleanasDeComparacionAritmetica:
	//    x=("LEGAL" | "ILEGAL" | "ALEGAL" | "ANTILEGAL") (op=OpComp)
	//    //LEGAL -> >
	//    //ILEGAL -> <
	//    //ALEGAL -> >=
	//    //ANTILEGAL -> <=
	//;
	public OperacionesBooleanasDeComparacionAritmeticaElements getOperacionesBooleanasDeComparacionAritmeticaAccess() {
		return pOperacionesBooleanasDeComparacionAritmetica;
	}
	
	public ParserRule getOperacionesBooleanasDeComparacionAritmeticaRule() {
		return getOperacionesBooleanasDeComparacionAritmeticaAccess().getRule();
	}
	
	//OpNEG:
	//    "ALVERRES" expr=Expresion
	//;
	public OpNEGElements getOpNEGAccess() {
		return pOpNEG;
	}
	
	public ParserRule getOpNEGRule() {
		return getOpNEGAccess().getRule();
	}
	
	//OpComp:
	//    izq = Expresion "CON" der = Expresion
	//;
	public OpCompElements getOpCompAccess() {
		return pOpComp;
	}
	
	public ParserRule getOpCompRule() {
		return getOpCompAccess().getRule();
	}
	
	//ExpresionBooleanaSimple:
	//    x = ("YIN" | "YANG")
	//;
	public ExpresionBooleanaSimpleElements getExpresionBooleanaSimpleAccess() {
		return pExpresionBooleanaSimple;
	}
	
	public ParserRule getExpresionBooleanaSimpleRule() {
		return getExpresionBooleanaSimpleAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

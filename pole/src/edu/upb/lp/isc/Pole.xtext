grammar edu.upb.lp.isc.Pole with org.eclipse.xtext.common.Terminals

generate pole "http://www.upb.edu/lp/isc/Pole"



Programa:
	
	name = ID "PO"
	
	
	ej=(Ejecucion)
	
	
	"LE"
	
;

Ejecucion:
	
	instr+=Instruccion+
	
;

Instruccion: 
	
	DeclVariables | Imprimir | Condicional | Switch | For | While | DoWhile | Funciones | AsignacionVariable | LlamadoMetodo | ImprimirSinSaltoDeLinea
	
;

LlamadoMetodo: 
	
	"EYYOLVIDONA" method=[Funciones] "("("EY" args+=Expresion)*")"
	
;



Funciones:
	
	"OIGO" tipoDeDato=TipoDeDato name=ID ("MUY" param+=DeclVariables2)* 
		(instr+=Instruccion)*
		("PEROMUY" e=Expresion)? 
	"BORROSO"
	
	
;





Imprimir:
	
	"PARATICONDESPRECIO" (e=Expresion) ("@" e1+=Expresion)*
	
;

ImprimirSinSaltoDeLinea:
	
	"PARATI" (e=Expresion) ("@" e1+=Expresion)*
	
;


Condicional:
	 
	 
	  "GG?" expr=Expresion
	  	"WITHTEAM"
	  		instr+=Instruccion*
	  	
	  	(casiTeam+=CondicionalElseIf)*
	  		
	     ("NOTEAM"
	     	instrElse+=Instruccion*)?
	     	
	  "EZ"   	
	
;



CondicionalElseIf:
	
	"CASITEAM" exprELIF=Expresion
		(instrELIF += Instruccion)*
		
	
	
;



Switch:
	
	var=LlamadoVariable "RULETARUSA?"
		 (case += CaseSwitch)+ 
	"BOOM"	
		
	
;



CaseSwitch:
	
	"BALA" (e=Expresion) instr+=Instruccion*
	

;



For:
	
	
	
	
	"CHOCO" name=ID (var = DeclVariables) "YVOLO" (expr=ExpresionBooleana) "YYOVOLE" asig=AsignacionVariable
		(instr+=Instruccion)*	
	"YSEFUE"	 
	
;

While:
	
	"SA" name=ID "MATAO" expr=Expresion
		(instr+=Instruccion)*
	"PACO"	
	
;

DoWhile:
	
	"AHITEVAMI" name=ID
		(instr+=Instruccion)*
	"DOLOR" expr=Expresion
	
;

DeclVariables:
	
	"PEREMENNAYA" tipoDeDato=TipoDeDato name=ID "->" valor=Expresion 
	
;

DeclVariables2 returns DeclVariables:
	tipoDeDato=TipoDeDato name=ID
;

AsignacionVariable:
	
	variable = [DeclVariables] "->" valor=Expresion 
	
;

TipoDeDato:
	
	"DALAS" | "MRBEAST" | "XOKAS" | "YINYANG" | "MICORAZON" //DALAS = String, MRBEAST= Int, XOKAS = Double, YING = Boolean, MICORAZON = Void
	
;

Expresion:
	
	ExpresionDecimal | ExpresionString | ExpresionBooleana |  LlamadoVariable | LlamadoFuncion 
	
;

LlamadoVariable:
	
	variable=[DeclVariables]
	
;

LlamadoFuncion:
	
	"EYYOLVIDONA" func=[Funciones] "("("EY" args+=Expresion)*")" 
	
;

ExpresionDecimal:
	
	ExpresionAritmetica | ExpresionSimpleAritmetica | ExpresionSimpleXokas | ExpresionLongitudString | ExpresionNegativo
	
	
;

ExpresionNegativo:
	
	'-' e = Expresion
	
;

ExpresionSimpleXokas:
	
	x = INT '.' y=INT (('e'|'E') '-'? z=INT)?
	
;

ExpresionSimpleAritmetica:
	
	x=INT 
;

ExpresionLongitudString:
	
	"KGRANDE" llamado = Expresion
	
;

 

ExpresionAritmetica:
	
	 (Suma | Resta | Multiplicacion | Division | Modulo)
	
	
;

Suma:
	
	"SUMA" op=Operacion
	
;

Resta:
	
	"RESTA" op=Operacion
	
;

Multiplicacion:
	
	"MULTIPLICACION" op=Operacion
	
;

Division:
	
	"DIVISION" op=Operacion
	
;

Modulo:
	
	"MODULO" op=Operacion
	
;

Operacion:
	
	"JULIOPROFE" izq=Expresion "Y" der=Expresion
	
;

ExpresionString:
	
	ExpresionConcatenacion | ExpresionSimpleString
	
;

ExpresionSimpleString:
	
	 x=STRING
;


ExpresionConcatenacion:
	
	"LA" primero=Expresion "GOTITA" segundo=Expresion
	 
;

ExpresionBooleana:
	
	ExpresionOperacionesBooleanas | ExpresionBooleanaSimple
	
;

ExpresionOperacionesBooleanas:
	
	OperacionesBooleanasDeComparacion |  OperacionesBooleanasDeComparacionAritmetica | OperadoresLogicosBooleanos | OpNEG | ExpresionStringVacio
	
;

OperacionesBooleanasDeComparacion:
	
	x=("POXI" | "AGUA") izq = Expresion y=("POL" | "RRAS") der = Expresion
	//PEPE PANDA -> AND
	//NAR ANJA -> OR
	//XO R -> XOR
	//POXI POL -> EQ
	// AGUA RRAS -> NEQ
;




ExpresionStringVacio:
	
	"MIBILLETERA" llamado = Expresion
	
;

OperadoresLogicosBooleanos:
	
	x=("PEPE" | "NAR" | "XO") izq = Expresion y=("PANDA" | "ANJA" | "R") der = Expresion 
	
	
;


OperacionesBooleanasDeComparacionAritmetica:
	
	x=("LEGAL" | "ILEGAL" | "ALEGAL" | "ANTILEGAL") (op=OpComp)
	//LEGAL -> >
	//ILEGAL -> <
	//ALEGAL -> >=
	//ANTILEGAL -> <=
	
	
	
;



OpNEG:
	
	"ALVERRES" expr=Expresion
	
;



OpComp:
	
	izq = Expresion "CON" der = Expresion
	
;

ExpresionBooleanaSimple:
	
	x = ("YIN" | "YANG")
	
;


















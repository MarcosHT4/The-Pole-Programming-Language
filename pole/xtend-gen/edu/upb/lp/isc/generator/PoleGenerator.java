/**
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.generator;

import edu.upb.lp.isc.pole.AsignacionVariable;
import edu.upb.lp.isc.pole.CaseSwitch;
import edu.upb.lp.isc.pole.Condicional;
import edu.upb.lp.isc.pole.CondicionalElseIf;
import edu.upb.lp.isc.pole.DeclVariables;
import edu.upb.lp.isc.pole.Division;
import edu.upb.lp.isc.pole.DoWhile;
import edu.upb.lp.isc.pole.Ejecucion;
import edu.upb.lp.isc.pole.Expresion;
import edu.upb.lp.isc.pole.ExpresionBooleanaSimple;
import edu.upb.lp.isc.pole.ExpresionConcatenacion;
import edu.upb.lp.isc.pole.ExpresionLongitudString;
import edu.upb.lp.isc.pole.ExpresionNegativo;
import edu.upb.lp.isc.pole.ExpresionSimpleAritmetica;
import edu.upb.lp.isc.pole.ExpresionSimpleString;
import edu.upb.lp.isc.pole.ExpresionSimpleXokas;
import edu.upb.lp.isc.pole.ExpresionStringVacio;
import edu.upb.lp.isc.pole.For;
import edu.upb.lp.isc.pole.Funciones;
import edu.upb.lp.isc.pole.Imprimir;
import edu.upb.lp.isc.pole.ImprimirSinSaltoDeLinea;
import edu.upb.lp.isc.pole.Instruccion;
import edu.upb.lp.isc.pole.LlamadoFuncion;
import edu.upb.lp.isc.pole.LlamadoMetodo;
import edu.upb.lp.isc.pole.LlamadoVariable;
import edu.upb.lp.isc.pole.Modulo;
import edu.upb.lp.isc.pole.Multiplicacion;
import edu.upb.lp.isc.pole.OpNEG;
import edu.upb.lp.isc.pole.OperacionesBooleanasDeComparacion;
import edu.upb.lp.isc.pole.OperacionesBooleanasDeComparacionAritmetica;
import edu.upb.lp.isc.pole.OperadoresLogicosBooleanos;
import edu.upb.lp.isc.pole.Programa;
import edu.upb.lp.isc.pole.Resta;
import edu.upb.lp.isc.pole.Suma;
import edu.upb.lp.isc.pole.Switch;
import edu.upb.lp.isc.pole.While;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PoleGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final Programa program = ((Programa) _get);
    String _name = program.getName();
    String _plus = (_name + ".cpp");
    fsa.generateFile(_plus, this.generate(program));
  }
  
  public CharSequence generate(final Programa p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("using namespace std;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    {
      EList<Instruccion> _instr = p.getEj().getInstr();
      for(final Instruccion instr : _instr) {
        {
          if ((instr instanceof Funciones)) {
            _builder.append(" ");
            {
              boolean _equals = ((Funciones)instr).getTipoDeDato().equals("DALAS");
              if (_equals) {
                _builder.append(" string ");
              } else {
                boolean _equals_1 = ((Funciones)instr).getTipoDeDato().equals("MRBEAST");
                if (_equals_1) {
                  _builder.append("int ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                } else {
                  boolean _equals_2 = ((Funciones)instr).getTipoDeDato().equals("XOKAS");
                  if (_equals_2) {
                    _builder.append("double ");
                  } else {
                    boolean _equals_3 = ((Funciones)instr).getTipoDeDato().equals("YINYANG");
                    if (_equals_3) {
                      _builder.append("bool");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                    } else {
                      boolean _equals_4 = ((Funciones)instr).getTipoDeDato().equals("MICORAZON");
                      if (_equals_4) {
                        _builder.append("void ");
                      }
                    }
                  }
                }
              }
            }
            String _name = ((Funciones)instr).getName();
            _builder.append(_name, "\t");
            _builder.append("(");
            {
              EList<DeclVariables> _param = ((Funciones)instr).getParam();
              for(final DeclVariables iParam : _param) {
                {
                  EList<DeclVariables> _param_1 = ((Funciones)instr).getParam();
                  int _length = ((Object[])Conversions.unwrapArray(((Funciones)instr).getParam(), Object.class)).length;
                  int _minus = (_length - 1);
                  boolean _equals_5 = iParam.equals(_param_1.get(_minus));
                  if (_equals_5) {
                    {
                      boolean _equals_6 = iParam.getTipoDeDato().equals("DALAS");
                      if (_equals_6) {
                        _builder.append(" string ");
                      } else {
                        boolean _equals_7 = iParam.getTipoDeDato().equals("MRBEAST");
                        if (_equals_7) {
                          _builder.append("int ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t");
                        } else {
                          boolean _equals_8 = iParam.getTipoDeDato().equals("XOKAS");
                          if (_equals_8) {
                            _builder.append("double ");
                          } else {
                            boolean _equals_9 = iParam.getTipoDeDato().equals("YINYANG");
                            if (_equals_9) {
                              _builder.append("bool");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t");
                            }
                          }
                        }
                      }
                    }
                    String _name_1 = iParam.getName();
                    _builder.append(_name_1, "\t");
                  } else {
                    {
                      boolean _equals_10 = iParam.getTipoDeDato().equals("DALAS");
                      if (_equals_10) {
                        _builder.append(" string ");
                      } else {
                        boolean _equals_11 = iParam.getTipoDeDato().equals("MRBEAST");
                        if (_equals_11) {
                          _builder.append("int ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t");
                        } else {
                          boolean _equals_12 = iParam.getTipoDeDato().equals("XOKAS");
                          if (_equals_12) {
                            _builder.append("double ");
                          } else {
                            boolean _equals_13 = iParam.getTipoDeDato().equals("YINYANG");
                            if (_equals_13) {
                              _builder.append("bool");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t");
                            }
                          }
                        }
                      }
                    }
                    String _name_2 = iParam.getName();
                    _builder.append(_name_2, "\t");
                    _builder.append(",");
                  }
                }
                _builder.append(" ");
              }
            }
            _builder.append("); ");
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _generate = this.generate(p.getEj());
    _builder.append(_generate, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Ejecucion ej) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<Instruccion> _instr = ej.getInstr();
      for(final Instruccion instr : _instr) {
        _builder.append(" ");
        Object _generate = this.generate(instr);
        _builder.append(_generate);
        _builder.append(" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Imprimir imp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cout<<");
    Object _generate = this.generate(imp.getE());
    _builder.append(_generate, "\t");
    _builder.append("<<");
    {
      EList<Expresion> _e1 = imp.getE1();
      for(final Expresion expr : _e1) {
        Object _generate_1 = this.generate(expr);
        _builder.append(_generate_1, "\t");
        _builder.append(" << ");
      }
    }
    _builder.append("endl; ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ImprimirSinSaltoDeLinea imp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cout<<");
    Object _generate = this.generate(imp.getE());
    _builder.append(_generate, "\t");
    {
      EList<Expresion> _e1 = imp.getE1();
      for(final Expresion expr : _e1) {
        _builder.append("<<");
        Object _generate_1 = this.generate(expr);
        _builder.append(_generate_1, "\t");
      }
    }
    _builder.append("; ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final DeclVariables decl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      boolean _equals = decl.getTipoDeDato().equals("DALAS");
      if (_equals) {
        _builder.append(" string ");
      } else {
        boolean _equals_1 = decl.getTipoDeDato().equals("MRBEAST");
        if (_equals_1) {
          _builder.append("int ");
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equals_2 = decl.getTipoDeDato().equals("XOKAS");
          if (_equals_2) {
            _builder.append("double ");
          } else {
            boolean _equals_3 = decl.getTipoDeDato().equals("YINYANG");
            if (_equals_3) {
              _builder.append("bool");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    String _name = decl.getName();
    _builder.append(_name);
    _builder.append(" = ");
    Object _generate = this.generate(decl.getValor());
    _builder.append(_generate);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final AsignacionVariable asig) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    String _name = asig.getVariable().getName();
    _builder.append(_name);
    _builder.append(" = ");
    Object _generate = this.generate(asig.getValor());
    _builder.append(_generate);
    _builder.append("; ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Condicional cond) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(");
    Object _generate = this.generate(cond.getExpr());
    _builder.append(_generate, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    {
      EList<Instruccion> _instr = cond.getInstr();
      for(final Instruccion instrIn : _instr) {
        Object _generate_1 = this.generate(instrIn);
        _builder.append(_generate_1, "\t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    {
      boolean _isEmpty = cond.getCasiTeam().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          EList<CondicionalElseIf> _casiTeam = cond.getCasiTeam();
          for(final CondicionalElseIf condElif : _casiTeam) {
            Object _generate_2 = this.generate(condElif);
            _builder.append(_generate_2, "\t");
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty_1 = cond.getInstrElse().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        {
          EList<Instruccion> _instrElse = cond.getInstrElse();
          for(final Instruccion instrIn2 : _instrElse) {
            Object _generate_3 = this.generate(instrIn2);
            _builder.append(_generate_3, "\t\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final CondicionalElseIf condelif) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else if(");
    Object _generate = this.generate(condelif.getExprELIF());
    _builder.append(_generate, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    {
      EList<Instruccion> _instrELIF = condelif.getInstrELIF();
      for(final Instruccion instrIn : _instrELIF) {
        Object _generate_1 = this.generate(instrIn);
        _builder.append(_generate_1, "\t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Switch sw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch(");
    Object _generate = this.generate(sw.getVar());
    _builder.append(_generate, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    {
      EList<CaseSwitch> _case = sw.getCase();
      for(final CaseSwitch caser : _case) {
        Object _generate_1 = this.generate(caser);
        _builder.append(_generate_1, "\t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final CaseSwitch caseS) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case ");
    Object _generate = this.generate(caseS.getE());
    _builder.append(_generate, "\t");
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    {
      EList<Instruccion> _instr = caseS.getInstr();
      for(final Instruccion instrI : _instr) {
        Object _generate_1 = this.generate(instrI);
        _builder.append(_generate_1, "\t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final While wh) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(");
    Object _generate = this.generate(wh.getExpr());
    _builder.append(_generate, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    {
      EList<Instruccion> _instr = wh.getInstr();
      for(final Instruccion instrI : _instr) {
        Object _generate_1 = this.generate(instrI);
        _builder.append(_generate_1, "\t\t");
      }
    }
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final DoWhile dw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("do {");
    _builder.newLine();
    _builder.append("\t\t");
    {
      EList<Instruccion> _instr = dw.getInstr();
      for(final Instruccion instrI : _instr) {
        Object _generate = this.generate(instrI);
        _builder.append(_generate, "\t\t");
      }
    }
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}while(");
    Object _generate_1 = this.generate(dw.getExpr());
    _builder.append(_generate_1, "\t");
    _builder.append("); ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final For fr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(");
    Object _generate = this.generate(fr.getVar());
    _builder.append(_generate, "\t");
    _builder.append(" ");
    Object _generate_1 = this.generate(fr.getExpr());
    _builder.append(_generate_1, "\t");
    _builder.append(" ; ");
    String _replace = this.generate(fr.getAsig()).toString().replace(";", "");
    _builder.append(_replace, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    {
      EList<Instruccion> _instr = fr.getInstr();
      for(final Instruccion instrI : _instr) {
        Object _generate_2 = this.generate(instrI);
        _builder.append(_generate_2, "\t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Funciones func) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      boolean _equals = func.getTipoDeDato().equals("DALAS");
      if (_equals) {
        _builder.append(" string ");
      } else {
        boolean _equals_1 = func.getTipoDeDato().equals("MRBEAST");
        if (_equals_1) {
          _builder.append("int ");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
        } else {
          boolean _equals_2 = func.getTipoDeDato().equals("XOKAS");
          if (_equals_2) {
            _builder.append("double ");
          } else {
            boolean _equals_3 = func.getTipoDeDato().equals("YINYANG");
            if (_equals_3) {
              _builder.append("bool");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
            } else {
              boolean _equals_4 = func.getTipoDeDato().equals("MICORAZON");
              if (_equals_4) {
                _builder.append("void ");
              }
            }
          }
        }
      }
    }
    String _name = func.getName();
    _builder.append(_name);
    _builder.append("(");
    {
      EList<DeclVariables> _param = func.getParam();
      for(final DeclVariables iParam : _param) {
        {
          EList<DeclVariables> _param_1 = func.getParam();
          int _length = ((Object[])Conversions.unwrapArray(func.getParam(), Object.class)).length;
          int _minus = (_length - 1);
          boolean _equals_5 = iParam.equals(_param_1.get(_minus));
          if (_equals_5) {
            {
              boolean _equals_6 = iParam.getTipoDeDato().equals("DALAS");
              if (_equals_6) {
                _builder.append(" string ");
              } else {
                boolean _equals_7 = iParam.getTipoDeDato().equals("MRBEAST");
                if (_equals_7) {
                  _builder.append("int ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                } else {
                  boolean _equals_8 = iParam.getTipoDeDato().equals("XOKAS");
                  if (_equals_8) {
                    _builder.append("double ");
                  } else {
                    boolean _equals_9 = iParam.getTipoDeDato().equals("YINYANG");
                    if (_equals_9) {
                      _builder.append("bool");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                    }
                  }
                }
              }
            }
            String _name_1 = iParam.getName();
            _builder.append(_name_1);
          } else {
            {
              boolean _equals_10 = iParam.getTipoDeDato().equals("DALAS");
              if (_equals_10) {
                _builder.append(" string ");
              } else {
                boolean _equals_11 = iParam.getTipoDeDato().equals("MRBEAST");
                if (_equals_11) {
                  _builder.append("int ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t");
                } else {
                  boolean _equals_12 = iParam.getTipoDeDato().equals("XOKAS");
                  if (_equals_12) {
                    _builder.append("double ");
                  } else {
                    boolean _equals_13 = iParam.getTipoDeDato().equals("YINYANG");
                    if (_equals_13) {
                      _builder.append("bool");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t");
                    }
                  }
                }
              }
            }
            String _name_2 = iParam.getName();
            _builder.append(_name_2);
            _builder.append(",");
          }
        }
        _builder.append(" ");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    {
      EList<Instruccion> _instr = func.getInstr();
      for(final Instruccion instrI : _instr) {
        Object _generate = this.generate(instrI);
        _builder.append(_generate, "\t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    {
      boolean _equals_14 = func.getTipoDeDato().equals("MICORAZON");
      boolean _not = (!_equals_14);
      if (_not) {
        _builder.append(" return ");
        Object _generate_1 = this.generate(func.getE());
        _builder.append(_generate_1, "\t\t");
        _builder.append("; ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final LlamadoMetodo llamado) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    String _name = llamado.getMethod().getName();
    _builder.append(_name, "\t");
    _builder.append("(");
    {
      EList<Expresion> _args = llamado.getArgs();
      for(final Expresion arg : _args) {
        _builder.append(" ");
        {
          EList<Expresion> _args_1 = llamado.getArgs();
          int _length = ((Object[])Conversions.unwrapArray(llamado.getArgs(), Object.class)).length;
          int _minus = (_length - 1);
          boolean _equals = arg.equals(_args_1.get(_minus));
          if (_equals) {
            Object _generate = this.generate(arg);
            _builder.append(_generate, "\t");
          } else {
            Object _generate_1 = this.generate(arg);
            _builder.append(_generate_1, "\t");
            _builder.append(", ");
          }
        }
        _builder.append(" ");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ExpresionSimpleAritmetica expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    int _x = expr.getX();
    _builder.append(_x, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ExpresionSimpleString expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"");
    String _x = expr.getX();
    _builder.append(_x, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ExpresionBooleanaSimple expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    {
      boolean _equals = expr.getX().equals("YIN");
      if (_equals) {
        _builder.append(" true");
      } else {
        boolean _equals_1 = expr.getX().equals("YANG");
        if (_equals_1) {
          _builder.append("false");
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ExpresionSimpleXokas expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    int _x = expr.getX();
    _builder.append(_x, "\t");
    _builder.append(".");
    int _y = expr.getY();
    _builder.append(_y, "\t");
    int _z = expr.getZ();
    _builder.append(_z, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ExpresionLongitudString expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    Object _generate = this.generate(expr.getLlamado());
    _builder.append(_generate, "\t");
    _builder.append(".length()");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ExpresionNegativo expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("-(");
    Object _generate = this.generate(expr.getE());
    _builder.append(_generate, "\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Suma suma) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(");
    Object _generate = this.generate(suma.getOp().getIzq());
    _builder.append(_generate, "\t");
    _builder.append(" + ");
    Object _generate_1 = this.generate(suma.getOp().getDer());
    _builder.append(_generate_1, "\t");
    _builder.append(")\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Resta resta) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(");
    Object _generate = this.generate(resta.getOp().getIzq());
    _builder.append(_generate, "\t");
    _builder.append(" - ");
    Object _generate_1 = this.generate(resta.getOp().getDer());
    _builder.append(_generate_1, "\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Multiplicacion mul) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(");
    Object _generate = this.generate(mul.getOp().getIzq());
    _builder.append(_generate, "\t");
    _builder.append(" * ");
    Object _generate_1 = this.generate(mul.getOp().getDer());
    _builder.append(_generate_1, "\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Division div) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(");
    Object _generate = this.generate(div.getOp().getIzq());
    _builder.append(_generate, "\t");
    _builder.append(" / ");
    Object _generate_1 = this.generate(div.getOp().getDer());
    _builder.append(_generate_1, "\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final Modulo mod) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(");
    Object _generate = this.generate(mod.getOp().getIzq());
    _builder.append(_generate, "\t");
    _builder.append(" % ");
    Object _generate_1 = this.generate(mod.getOp().getDer());
    _builder.append(_generate_1, "\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ExpresionConcatenacion conc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    Object _generate = this.generate(conc.getPrimero());
    _builder.append(_generate, "\t");
    _builder.append(" + ");
    Object _generate_1 = this.generate(conc.getSegundo());
    _builder.append(_generate_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final OpNEG o) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("!");
    Object _generate = this.generate(o.getExpr());
    _builder.append(_generate, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final LlamadoVariable llamadoVariable) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    String _name = llamadoVariable.getVariable().getName();
    _builder.append(_name, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final LlamadoFuncion llamadoFuncion) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    String _name = llamadoFuncion.getFunc().getName();
    _builder.append(_name, "\t");
    _builder.append("(");
    {
      EList<Expresion> _args = llamadoFuncion.getArgs();
      for(final Expresion arg : _args) {
        _builder.append(" ");
        {
          EList<Expresion> _args_1 = llamadoFuncion.getArgs();
          int _length = ((Object[])Conversions.unwrapArray(llamadoFuncion.getArgs(), Object.class)).length;
          int _minus = (_length - 1);
          boolean _equals = arg.equals(_args_1.get(_minus));
          if (_equals) {
            Object _generate = this.generate(arg);
            _builder.append(_generate, "\t");
          } else {
            Object _generate_1 = this.generate(arg);
            _builder.append(_generate_1, "\t");
            _builder.append(", ");
          }
        }
        _builder.append(" ");
      }
    }
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final OperadoresLogicosBooleanos op) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    Object _generate = this.generate(op.getIzq());
    _builder.append(_generate, "\t");
    {
      boolean _equals = op.getX().equals("PEPE");
      if (_equals) {
        _builder.append("&&");
      } else {
        boolean _equals_1 = op.getX().equals("NAR");
        if (_equals_1) {
          _builder.append("||");
        } else {
          boolean _equals_2 = op.getX().equals("XO");
          if (_equals_2) {
            _builder.append("^");
          }
        }
      }
    }
    Object _generate_1 = this.generate(op.getDer());
    _builder.append(_generate_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final OperacionesBooleanasDeComparacion op) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    Object _generate = this.generate(op.getIzq());
    _builder.append(_generate, "\t");
    {
      boolean _equals = op.getX().equals("POXI");
      if (_equals) {
        _builder.append("==");
      } else {
        boolean _equals_1 = op.getX().equals("AGUA");
        if (_equals_1) {
          _builder.append(" !=");
        }
      }
    }
    Object _generate_1 = this.generate(op.getDer());
    _builder.append(_generate_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final ExpresionStringVacio expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    Object _generate = this.generate(expr.getLlamado());
    _builder.append(_generate, "\t");
    _builder.append(".empty()");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generate(final OperacionesBooleanasDeComparacionAritmetica expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    Object _generate = this.generate(expr.getOp().getIzq());
    _builder.append(_generate, "\t");
    _builder.append(" ");
    {
      boolean _equals = expr.getX().equals("LEGAL");
      if (_equals) {
        _builder.append(">");
      } else {
        boolean _equals_1 = expr.getX().equals("ILEGAL");
        if (_equals_1) {
          _builder.append("<");
        } else {
          boolean _equals_2 = expr.getX().equals("ALEGAL");
          if (_equals_2) {
            _builder.append(">=");
          } else {
            boolean _equals_3 = expr.getX().equals("ANTILEGAL");
            if (_equals_3) {
              _builder.append("<=");
            }
          }
        }
      }
    }
    Object _generate_1 = this.generate(expr.getOp().getDer());
    _builder.append(_generate_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate(final EObject div) {
    if (div instanceof Division) {
      return _generate((Division)div);
    } else if (div instanceof ExpresionStringVacio) {
      return _generate((ExpresionStringVacio)div);
    } else if (div instanceof Modulo) {
      return _generate((Modulo)div);
    } else if (div instanceof Multiplicacion) {
      return _generate((Multiplicacion)div);
    } else if (div instanceof OpNEG) {
      return _generate((OpNEG)div);
    } else if (div instanceof OperacionesBooleanasDeComparacion) {
      return _generate((OperacionesBooleanasDeComparacion)div);
    } else if (div instanceof OperacionesBooleanasDeComparacionAritmetica) {
      return _generate((OperacionesBooleanasDeComparacionAritmetica)div);
    } else if (div instanceof OperadoresLogicosBooleanos) {
      return _generate((OperadoresLogicosBooleanos)div);
    } else if (div instanceof Resta) {
      return _generate((Resta)div);
    } else if (div instanceof Suma) {
      return _generate((Suma)div);
    } else if (div instanceof ExpresionBooleanaSimple) {
      return _generate((ExpresionBooleanaSimple)div);
    } else if (div instanceof ExpresionConcatenacion) {
      return _generate((ExpresionConcatenacion)div);
    } else if (div instanceof ExpresionLongitudString) {
      return _generate((ExpresionLongitudString)div);
    } else if (div instanceof ExpresionNegativo) {
      return _generate((ExpresionNegativo)div);
    } else if (div instanceof ExpresionSimpleAritmetica) {
      return _generate((ExpresionSimpleAritmetica)div);
    } else if (div instanceof ExpresionSimpleString) {
      return _generate((ExpresionSimpleString)div);
    } else if (div instanceof ExpresionSimpleXokas) {
      return _generate((ExpresionSimpleXokas)div);
    } else if (div instanceof AsignacionVariable) {
      return _generate((AsignacionVariable)div);
    } else if (div instanceof Condicional) {
      return _generate((Condicional)div);
    } else if (div instanceof DeclVariables) {
      return _generate((DeclVariables)div);
    } else if (div instanceof DoWhile) {
      return _generate((DoWhile)div);
    } else if (div instanceof For) {
      return _generate((For)div);
    } else if (div instanceof Funciones) {
      return _generate((Funciones)div);
    } else if (div instanceof Imprimir) {
      return _generate((Imprimir)div);
    } else if (div instanceof ImprimirSinSaltoDeLinea) {
      return _generate((ImprimirSinSaltoDeLinea)div);
    } else if (div instanceof LlamadoFuncion) {
      return _generate((LlamadoFuncion)div);
    } else if (div instanceof LlamadoMetodo) {
      return _generate((LlamadoMetodo)div);
    } else if (div instanceof LlamadoVariable) {
      return _generate((LlamadoVariable)div);
    } else if (div instanceof Switch) {
      return _generate((Switch)div);
    } else if (div instanceof While) {
      return _generate((While)div);
    } else if (div instanceof CaseSwitch) {
      return _generate((CaseSwitch)div);
    } else if (div instanceof CondicionalElseIf) {
      return _generate((CondicionalElseIf)div);
    } else if (div instanceof Ejecucion) {
      return _generate((Ejecucion)div);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(div).toString());
    }
  }
}

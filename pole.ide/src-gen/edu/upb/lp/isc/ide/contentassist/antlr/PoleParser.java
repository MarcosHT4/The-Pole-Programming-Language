/*
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.upb.lp.isc.ide.contentassist.antlr.internal.InternalPoleParser;
import edu.upb.lp.isc.services.PoleGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PoleParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PoleGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PoleGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstruccionAccess().getAlternatives(), "rule__Instruccion__Alternatives");
			builder.put(grammarAccess.getTipoDeDatoAccess().getAlternatives(), "rule__TipoDeDato__Alternatives");
			builder.put(grammarAccess.getExpresionAccess().getAlternatives(), "rule__Expresion__Alternatives");
			builder.put(grammarAccess.getExpresionDecimalAccess().getAlternatives(), "rule__ExpresionDecimal__Alternatives");
			builder.put(grammarAccess.getExpresionSimpleXokasAccess().getAlternatives_3_0(), "rule__ExpresionSimpleXokas__Alternatives_3_0");
			builder.put(grammarAccess.getExpresionAritmeticaAccess().getAlternatives(), "rule__ExpresionAritmetica__Alternatives");
			builder.put(grammarAccess.getExpresionStringAccess().getAlternatives(), "rule__ExpresionString__Alternatives");
			builder.put(grammarAccess.getExpresionBooleanaAccess().getAlternatives(), "rule__ExpresionBooleana__Alternatives");
			builder.put(grammarAccess.getExpresionOperacionesBooleanasAccess().getAlternatives(), "rule__ExpresionOperacionesBooleanas__Alternatives");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAccess().getXAlternatives_0_0(), "rule__OperacionesBooleanasDeComparacion__XAlternatives_0_0");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAccess().getYAlternatives_2_0(), "rule__OperacionesBooleanasDeComparacion__YAlternatives_2_0");
			builder.put(grammarAccess.getOperadoresLogicosBooleanosAccess().getXAlternatives_0_0(), "rule__OperadoresLogicosBooleanos__XAlternatives_0_0");
			builder.put(grammarAccess.getOperadoresLogicosBooleanosAccess().getYAlternatives_2_0(), "rule__OperadoresLogicosBooleanos__YAlternatives_2_0");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAritmeticaAccess().getXAlternatives_0_0(), "rule__OperacionesBooleanasDeComparacionAritmetica__XAlternatives_0_0");
			builder.put(grammarAccess.getExpresionBooleanaSimpleAccess().getXAlternatives_0(), "rule__ExpresionBooleanaSimple__XAlternatives_0");
			builder.put(grammarAccess.getProgramaAccess().getGroup(), "rule__Programa__Group__0");
			builder.put(grammarAccess.getLlamadoMetodoAccess().getGroup(), "rule__LlamadoMetodo__Group__0");
			builder.put(grammarAccess.getLlamadoMetodoAccess().getGroup_3(), "rule__LlamadoMetodo__Group_3__0");
			builder.put(grammarAccess.getFuncionesAccess().getGroup(), "rule__Funciones__Group__0");
			builder.put(grammarAccess.getFuncionesAccess().getGroup_3(), "rule__Funciones__Group_3__0");
			builder.put(grammarAccess.getFuncionesAccess().getGroup_5(), "rule__Funciones__Group_5__0");
			builder.put(grammarAccess.getImprimirAccess().getGroup(), "rule__Imprimir__Group__0");
			builder.put(grammarAccess.getImprimirAccess().getGroup_2(), "rule__Imprimir__Group_2__0");
			builder.put(grammarAccess.getImprimirSinSaltoDeLineaAccess().getGroup(), "rule__ImprimirSinSaltoDeLinea__Group__0");
			builder.put(grammarAccess.getImprimirSinSaltoDeLineaAccess().getGroup_2(), "rule__ImprimirSinSaltoDeLinea__Group_2__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup(), "rule__Condicional__Group__0");
			builder.put(grammarAccess.getCondicionalAccess().getGroup_5(), "rule__Condicional__Group_5__0");
			builder.put(grammarAccess.getCondicionalElseIfAccess().getGroup(), "rule__CondicionalElseIf__Group__0");
			builder.put(grammarAccess.getSwitchAccess().getGroup(), "rule__Switch__Group__0");
			builder.put(grammarAccess.getCaseSwitchAccess().getGroup(), "rule__CaseSwitch__Group__0");
			builder.put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getDoWhileAccess().getGroup(), "rule__DoWhile__Group__0");
			builder.put(grammarAccess.getDeclVariablesAccess().getGroup(), "rule__DeclVariables__Group__0");
			builder.put(grammarAccess.getDeclVariables2Access().getGroup(), "rule__DeclVariables2__Group__0");
			builder.put(grammarAccess.getAsignacionVariableAccess().getGroup(), "rule__AsignacionVariable__Group__0");
			builder.put(grammarAccess.getLlamadoFuncionAccess().getGroup(), "rule__LlamadoFuncion__Group__0");
			builder.put(grammarAccess.getLlamadoFuncionAccess().getGroup_3(), "rule__LlamadoFuncion__Group_3__0");
			builder.put(grammarAccess.getExpresionNegativoAccess().getGroup(), "rule__ExpresionNegativo__Group__0");
			builder.put(grammarAccess.getExpresionSimpleXokasAccess().getGroup(), "rule__ExpresionSimpleXokas__Group__0");
			builder.put(grammarAccess.getExpresionSimpleXokasAccess().getGroup_3(), "rule__ExpresionSimpleXokas__Group_3__0");
			builder.put(grammarAccess.getExpresionLongitudStringAccess().getGroup(), "rule__ExpresionLongitudString__Group__0");
			builder.put(grammarAccess.getSumaAccess().getGroup(), "rule__Suma__Group__0");
			builder.put(grammarAccess.getRestaAccess().getGroup(), "rule__Resta__Group__0");
			builder.put(grammarAccess.getMultiplicacionAccess().getGroup(), "rule__Multiplicacion__Group__0");
			builder.put(grammarAccess.getDivisionAccess().getGroup(), "rule__Division__Group__0");
			builder.put(grammarAccess.getModuloAccess().getGroup(), "rule__Modulo__Group__0");
			builder.put(grammarAccess.getOperacionAccess().getGroup(), "rule__Operacion__Group__0");
			builder.put(grammarAccess.getExpresionConcatenacionAccess().getGroup(), "rule__ExpresionConcatenacion__Group__0");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAccess().getGroup(), "rule__OperacionesBooleanasDeComparacion__Group__0");
			builder.put(grammarAccess.getExpresionStringVacioAccess().getGroup(), "rule__ExpresionStringVacio__Group__0");
			builder.put(grammarAccess.getOperadoresLogicosBooleanosAccess().getGroup(), "rule__OperadoresLogicosBooleanos__Group__0");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAritmeticaAccess().getGroup(), "rule__OperacionesBooleanasDeComparacionAritmetica__Group__0");
			builder.put(grammarAccess.getOpNEGAccess().getGroup(), "rule__OpNEG__Group__0");
			builder.put(grammarAccess.getOpCompAccess().getGroup(), "rule__OpComp__Group__0");
			builder.put(grammarAccess.getProgramaAccess().getNameAssignment_0(), "rule__Programa__NameAssignment_0");
			builder.put(grammarAccess.getProgramaAccess().getEjAssignment_2(), "rule__Programa__EjAssignment_2");
			builder.put(grammarAccess.getEjecucionAccess().getInstrAssignment(), "rule__Ejecucion__InstrAssignment");
			builder.put(grammarAccess.getLlamadoMetodoAccess().getMethodAssignment_1(), "rule__LlamadoMetodo__MethodAssignment_1");
			builder.put(grammarAccess.getLlamadoMetodoAccess().getArgsAssignment_3_1(), "rule__LlamadoMetodo__ArgsAssignment_3_1");
			builder.put(grammarAccess.getFuncionesAccess().getTipoDeDatoAssignment_1(), "rule__Funciones__TipoDeDatoAssignment_1");
			builder.put(grammarAccess.getFuncionesAccess().getNameAssignment_2(), "rule__Funciones__NameAssignment_2");
			builder.put(grammarAccess.getFuncionesAccess().getParamAssignment_3_1(), "rule__Funciones__ParamAssignment_3_1");
			builder.put(grammarAccess.getFuncionesAccess().getInstrAssignment_4(), "rule__Funciones__InstrAssignment_4");
			builder.put(grammarAccess.getFuncionesAccess().getEAssignment_5_1(), "rule__Funciones__EAssignment_5_1");
			builder.put(grammarAccess.getImprimirAccess().getEAssignment_1(), "rule__Imprimir__EAssignment_1");
			builder.put(grammarAccess.getImprimirAccess().getE1Assignment_2_1(), "rule__Imprimir__E1Assignment_2_1");
			builder.put(grammarAccess.getImprimirSinSaltoDeLineaAccess().getEAssignment_1(), "rule__ImprimirSinSaltoDeLinea__EAssignment_1");
			builder.put(grammarAccess.getImprimirSinSaltoDeLineaAccess().getE1Assignment_2_1(), "rule__ImprimirSinSaltoDeLinea__E1Assignment_2_1");
			builder.put(grammarAccess.getCondicionalAccess().getExprAssignment_1(), "rule__Condicional__ExprAssignment_1");
			builder.put(grammarAccess.getCondicionalAccess().getInstrAssignment_3(), "rule__Condicional__InstrAssignment_3");
			builder.put(grammarAccess.getCondicionalAccess().getCasiTeamAssignment_4(), "rule__Condicional__CasiTeamAssignment_4");
			builder.put(grammarAccess.getCondicionalAccess().getInstrElseAssignment_5_1(), "rule__Condicional__InstrElseAssignment_5_1");
			builder.put(grammarAccess.getCondicionalElseIfAccess().getExprELIFAssignment_1(), "rule__CondicionalElseIf__ExprELIFAssignment_1");
			builder.put(grammarAccess.getCondicionalElseIfAccess().getInstrELIFAssignment_2(), "rule__CondicionalElseIf__InstrELIFAssignment_2");
			builder.put(grammarAccess.getSwitchAccess().getVarAssignment_0(), "rule__Switch__VarAssignment_0");
			builder.put(grammarAccess.getSwitchAccess().getCaseAssignment_2(), "rule__Switch__CaseAssignment_2");
			builder.put(grammarAccess.getCaseSwitchAccess().getEAssignment_1(), "rule__CaseSwitch__EAssignment_1");
			builder.put(grammarAccess.getCaseSwitchAccess().getInstrAssignment_2(), "rule__CaseSwitch__InstrAssignment_2");
			builder.put(grammarAccess.getForAccess().getNameAssignment_1(), "rule__For__NameAssignment_1");
			builder.put(grammarAccess.getForAccess().getVarAssignment_2(), "rule__For__VarAssignment_2");
			builder.put(grammarAccess.getForAccess().getExprAssignment_4(), "rule__For__ExprAssignment_4");
			builder.put(grammarAccess.getForAccess().getAsigAssignment_6(), "rule__For__AsigAssignment_6");
			builder.put(grammarAccess.getForAccess().getInstrAssignment_7(), "rule__For__InstrAssignment_7");
			builder.put(grammarAccess.getWhileAccess().getNameAssignment_1(), "rule__While__NameAssignment_1");
			builder.put(grammarAccess.getWhileAccess().getExprAssignment_3(), "rule__While__ExprAssignment_3");
			builder.put(grammarAccess.getWhileAccess().getInstrAssignment_4(), "rule__While__InstrAssignment_4");
			builder.put(grammarAccess.getDoWhileAccess().getNameAssignment_1(), "rule__DoWhile__NameAssignment_1");
			builder.put(grammarAccess.getDoWhileAccess().getInstrAssignment_2(), "rule__DoWhile__InstrAssignment_2");
			builder.put(grammarAccess.getDoWhileAccess().getExprAssignment_4(), "rule__DoWhile__ExprAssignment_4");
			builder.put(grammarAccess.getDeclVariablesAccess().getTipoDeDatoAssignment_1(), "rule__DeclVariables__TipoDeDatoAssignment_1");
			builder.put(grammarAccess.getDeclVariablesAccess().getNameAssignment_2(), "rule__DeclVariables__NameAssignment_2");
			builder.put(grammarAccess.getDeclVariablesAccess().getValorAssignment_4(), "rule__DeclVariables__ValorAssignment_4");
			builder.put(grammarAccess.getDeclVariables2Access().getTipoDeDatoAssignment_0(), "rule__DeclVariables2__TipoDeDatoAssignment_0");
			builder.put(grammarAccess.getDeclVariables2Access().getNameAssignment_1(), "rule__DeclVariables2__NameAssignment_1");
			builder.put(grammarAccess.getAsignacionVariableAccess().getVariableAssignment_0(), "rule__AsignacionVariable__VariableAssignment_0");
			builder.put(grammarAccess.getAsignacionVariableAccess().getValorAssignment_2(), "rule__AsignacionVariable__ValorAssignment_2");
			builder.put(grammarAccess.getLlamadoVariableAccess().getVariableAssignment(), "rule__LlamadoVariable__VariableAssignment");
			builder.put(grammarAccess.getLlamadoFuncionAccess().getFuncAssignment_1(), "rule__LlamadoFuncion__FuncAssignment_1");
			builder.put(grammarAccess.getLlamadoFuncionAccess().getArgsAssignment_3_1(), "rule__LlamadoFuncion__ArgsAssignment_3_1");
			builder.put(grammarAccess.getExpresionNegativoAccess().getEAssignment_1(), "rule__ExpresionNegativo__EAssignment_1");
			builder.put(grammarAccess.getExpresionSimpleXokasAccess().getXAssignment_0(), "rule__ExpresionSimpleXokas__XAssignment_0");
			builder.put(grammarAccess.getExpresionSimpleXokasAccess().getYAssignment_2(), "rule__ExpresionSimpleXokas__YAssignment_2");
			builder.put(grammarAccess.getExpresionSimpleXokasAccess().getZAssignment_3_2(), "rule__ExpresionSimpleXokas__ZAssignment_3_2");
			builder.put(grammarAccess.getExpresionSimpleAritmeticaAccess().getXAssignment(), "rule__ExpresionSimpleAritmetica__XAssignment");
			builder.put(grammarAccess.getExpresionLongitudStringAccess().getLlamadoAssignment_1(), "rule__ExpresionLongitudString__LlamadoAssignment_1");
			builder.put(grammarAccess.getSumaAccess().getOpAssignment_1(), "rule__Suma__OpAssignment_1");
			builder.put(grammarAccess.getRestaAccess().getOpAssignment_1(), "rule__Resta__OpAssignment_1");
			builder.put(grammarAccess.getMultiplicacionAccess().getOpAssignment_1(), "rule__Multiplicacion__OpAssignment_1");
			builder.put(grammarAccess.getDivisionAccess().getOpAssignment_1(), "rule__Division__OpAssignment_1");
			builder.put(grammarAccess.getModuloAccess().getOpAssignment_1(), "rule__Modulo__OpAssignment_1");
			builder.put(grammarAccess.getOperacionAccess().getIzqAssignment_1(), "rule__Operacion__IzqAssignment_1");
			builder.put(grammarAccess.getOperacionAccess().getDerAssignment_3(), "rule__Operacion__DerAssignment_3");
			builder.put(grammarAccess.getExpresionSimpleStringAccess().getXAssignment(), "rule__ExpresionSimpleString__XAssignment");
			builder.put(grammarAccess.getExpresionConcatenacionAccess().getPrimeroAssignment_1(), "rule__ExpresionConcatenacion__PrimeroAssignment_1");
			builder.put(grammarAccess.getExpresionConcatenacionAccess().getSegundoAssignment_3(), "rule__ExpresionConcatenacion__SegundoAssignment_3");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAccess().getXAssignment_0(), "rule__OperacionesBooleanasDeComparacion__XAssignment_0");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAccess().getIzqAssignment_1(), "rule__OperacionesBooleanasDeComparacion__IzqAssignment_1");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAccess().getYAssignment_2(), "rule__OperacionesBooleanasDeComparacion__YAssignment_2");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAccess().getDerAssignment_3(), "rule__OperacionesBooleanasDeComparacion__DerAssignment_3");
			builder.put(grammarAccess.getExpresionStringVacioAccess().getLlamadoAssignment_1(), "rule__ExpresionStringVacio__LlamadoAssignment_1");
			builder.put(grammarAccess.getOperadoresLogicosBooleanosAccess().getXAssignment_0(), "rule__OperadoresLogicosBooleanos__XAssignment_0");
			builder.put(grammarAccess.getOperadoresLogicosBooleanosAccess().getIzqAssignment_1(), "rule__OperadoresLogicosBooleanos__IzqAssignment_1");
			builder.put(grammarAccess.getOperadoresLogicosBooleanosAccess().getYAssignment_2(), "rule__OperadoresLogicosBooleanos__YAssignment_2");
			builder.put(grammarAccess.getOperadoresLogicosBooleanosAccess().getDerAssignment_3(), "rule__OperadoresLogicosBooleanos__DerAssignment_3");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAritmeticaAccess().getXAssignment_0(), "rule__OperacionesBooleanasDeComparacionAritmetica__XAssignment_0");
			builder.put(grammarAccess.getOperacionesBooleanasDeComparacionAritmeticaAccess().getOpAssignment_1(), "rule__OperacionesBooleanasDeComparacionAritmetica__OpAssignment_1");
			builder.put(grammarAccess.getOpNEGAccess().getExprAssignment_1(), "rule__OpNEG__ExprAssignment_1");
			builder.put(grammarAccess.getOpCompAccess().getIzqAssignment_0(), "rule__OpComp__IzqAssignment_0");
			builder.put(grammarAccess.getOpCompAccess().getDerAssignment_2(), "rule__OpComp__DerAssignment_2");
			builder.put(grammarAccess.getExpresionBooleanaSimpleAccess().getXAssignment(), "rule__ExpresionBooleanaSimple__XAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PoleGrammarAccess grammarAccess;

	@Override
	protected InternalPoleParser createParser() {
		InternalPoleParser result = new InternalPoleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PoleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PoleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
